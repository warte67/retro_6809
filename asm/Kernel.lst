                      ;*** kernel.asm ************************
                       *      _  __                    _                           
                       *     | |/ /___ _ __ _ __   ___| |       __ _ ___ _ __ ___  
                       *     | ' // _ \ '__| '_ \ / _ \ |      / _` / __| '_ ` _ \ 
                       *     | . \  __/ |  | | | |  __/ |  _  | (_| \__ \ | | | | |
                       *     |_|\_\___|_|  |_| |_|\___|_| (_)  \__,_|___/_| |_| |_|
                      ;*                
                      ;* Released under the GPL v3.0 License.
                      ;* Original Author: Jay Faries (warte67)                                           
                      ;*****************************
                      
                      
0000                                  INCLUDE "Kernel_Header.asm"
                      ; ***** kernel_header.asm ************************************************************************
                      ; *      _  __                    _     _   _                _
                      ; *     | |/ /___ _ __ _ __   ___| |   | | | | ___  __ _  __| | ___ _ __    __ _ ___ _ __ ___
                      ; *     | ' // _ \ '__| '_ \ / _ \ |   | |_| |/ _ \/ _` |/ _` |/ _ \ '__|  / _` / __| '_ ` _ \
                      ; *     | . \  __/ |  | | | |  __/ |   |  _  |  __/ (_| | (_| |  __/ |_   | (_| \__ \ | | | | |
                      ; *     |_|\_\___|_|  |_| |_|\___|_|___|_| |_|\___|\__,_|\__,_|\___|_(_)   \__,_|___/_| |_| |_|
                      ; *                               |_____|
                      ; *
                      ; ************************************************************************************************
                      
0000                                      INCLUDE "Memory_Map.asm"
                      ;*** Memory_Map.asm *************************************************
                      ;*    __  __                                     __  __                                 
                      ;*   |  \/  |                                   |  \/  |                                
                      ;*   | \  / | ___ _ __ ___   ___  _ __ _   _    | \  / | __ _ _ __   __ _ ___ _ __ ___  
                      ;*   | |\/| |/ _ \ '_ ` _ \ / _ \| '__| | | |   | |\/| |/ _` | '_ \ / _` / __| '_ ` _ \ 
                      ;*   | |  | |  __/ | | | | | (_) | |  | |_| |   | |  | | (_| | |_) | (_| \__ \ | | | | |
                      ;*   |_|  |_|\___|_| |_| |_|\___/|_|   \__, |   |_|  |_|\__,_| .__(_)__,_|___/_| |_| |_|
                      ;*                                      __/ |_____           | |                        
                      ;*                                     |___/______|          |_|                        
                      ;*
                      ;* 6809 Assembly Memory Map Definition File
                      ;*
                      ;* Released under the GPL v3.0 License.
                      ;* Original Author: Jay Faries (warte67)
                      ;*
                      ;************************************
                      
                      
                      
                      ;   **********************************************
                      ;   * Allocated 64k Memory Mapped System Symbols *
                      ;   **********************************************
                      ;
                      
0000                  SOFT_VECTORS_DEVICE   equ    $0000    ; START: Software Interrupt Vectors
0000                  SOFT_EXEC             equ    $0000    ; Exec Software Interrupt Vector
0002                  SOFT_SWI3             equ    $0002    ; SWI3 Software Interrupt Vector
0004                  SOFT_SWI2             equ    $0004    ; SWI2 Software Interrupt Vector
0006                  SOFT_FIRQ             equ    $0006    ; FIRQ Software Interrupt Vector
0008                  SOFT_IRQ              equ    $0008    ; IRQ Software Interrupt Vector
000A                  SOFT_SWI              equ    $000A    ; SWI / SYS Software Interrupt Vector
000C                  SOFT_NMI              equ    $000C    ; NMI Software Interrupt Vector
000E                  SOFT_RESET            equ    $000E    ; RESET Software Interrupt Vector
                      ; _______________________________________________________________________
                      
0010                  SYSTEM_MEMORY_DEVICE  equ    $0010    ; START: System Memory
0010                  ZERO_PAGE             equ    $0010    ; Zero Page System and User Variables
00FF                  ZERO_PAGE_END         equ    $00FF    ; Zero Page System and User Variables
0100                  EDT_BUFFER            equ    $0100    ; START: Line Edit Character Buffer
017F                  KEY_END               equ    $017F    ; END: Line Edit Character Buffer
0180                  FIO_BUFFER            equ    $0180    ; START: Input/Output Buffer
01FF                  FIO_BFR_END           equ    $01FF    ; END: Input/Output Buffer
0200                  SYSTEM_STACK          equ    $0200    ; Bottom of System Stack Spcace
03FF                  SSTACK_END            equ    $03FF    ; END: System Stack Space
0400                  SSTACK_TOP            equ    $0400    ; TOP: System Stack Space
                      ; _______________________________________________________________________
                      
0400                  VIDEO_BUFFER_DEVICE   equ    $0400    ; START: Video Buffer (8K)
0400                  VIDEO_START           equ    $0400    ; Start of standard video buffer
23FF                  VIDEO_END             equ    $23FF    ; End of standard video buffer
2400                  VIDEO_TOP             equ    $2400    ; Top of standard video buffer
                      ; _______________________________________________________________________
                      
2400                  USER_MEMORY_DEVICE    equ    $2400    ; START: User Memory (34K)
2400                  USER_RAM              equ    $2400    ; User Accessable RAM
AFFF                  USER_RAM_END          equ    $AFFF    ; End User Accessable RAM
B000                  USER_RAM_TOP          equ    $B000    ; Top User Accessable RAM
                      ; _______________________________________________________________________
                      
B000                  BANKED_MEMORY_REGION  equ    $B000    ; START: Banked Memory Region (16K)
B000                  BANKMEM_ONE           equ    $B000    ; Banked Memory Page One (8K)
D000                  BANKMEM_TWO           equ    $D000    ; Banked Memory Page Two (8K)
EFFF                  BANKMEM_END           equ    $EFFF    ; End of Banked Memory Region
F000                  BANKMEM_TOP           equ    $F000    ; TOP of Banked Memory Region
                      ; _______________________________________________________________________
                      
F000                  KERNEL_ROM_DEVICE     equ    $F000    ; START: Kernel Rom (3.5K)
F000                  KERNEL_START          equ    $F000    ; Start of Kernel Rom Space
FDFF                  KERNEL_END            equ    $FDFF    ; End of Kernel Rom Space
FE00                  KERNEL_TOP            equ    $FE00    ; Top of Kernel Rom Space
                      ; _______________________________________________________________________
                      
FE00                  SYS_DEVICE            equ    $FE00    ; START: System and Debug Hardware Registers:
FE00                  SYS_BEGIN             equ    $FE00    ; Start of System Registers
FE00                  SYS_STATE             equ    $FE00    ; (Byte) System State Register
                                                            ; SYS_STATE: ABCD.SSSS                          
                                                            ; - bit  7   = Error: Standard Buffer Overflow  
                                                            ; - bit  6   = Error: Extended Buffer Overflow  
                                                            ; - bit  5   = Error: Reserved                  
                                                            ; - bit  4   = Error: Reserved                  
                                                            ; - bits 0-3 = CPU Speed (0-15):                
                                                            ;    0 ($0)  = CPU Clock   10 kHz 
                                                            ;    1 ($1)  = CPU Clock   25 kHz 
                                                            ;    2 ($2)  = CPU Clock   50 kHz 
                                                            ;    3 ($3)  = CPU Clock   75 kHz 
                                                            ;    4 ($4)  = CPU Clock  100 kHz 
                                                            ;    5 ($5)  = CPU Clock  150 kHz 
                                                            ;    6 ($6)  = CPU Clock  225 kHz 
                                                            ;    7 ($7)  = CPU Clock  350 kHz 
                                                            ;    8 ($8)  = CPU Clock  500 kHz 
                                                            ;    9 ($9)  = CPU Clock  750 kHz 
                                                            ;   10 ($A)  = CPU Clock  900 kHz 
                                                            ;   11 ($B)  = CPU Clock 1000 khz 
                                                            ;   12 ($C)  = CPU Clock 2000 khz 
                                                            ;   13 ($D)  = CPU Clock 3000 khz 
                                                            ;   14 ($E)  = CPU Clock 4000 khz 
                                                            ;   15 ($F)  = CPU Clock ~10.0 mhz. (unmetered) 
                                                            ; 
FE01                  SYS_SPEED             equ    $FE01    ; (Word) Average CPU Clock Speed (Read Only)
FE03                  SYS_CLOCK_DIV         equ    $FE03    ; (Byte) 60 hz Clock Divider Register (Read Only)
                                                            ; - bit 7: 0.546875 hz
                                                            ; - bit 6: 1.09375 hz
                                                            ; - bit 5: 2.1875 hz
                                                            ; - bit 4: 4.375 hz
                                                            ; - bit 3: 8.75 hz
                                                            ; - bit 2: 17.5 hz
                                                            ; - bit 1: 35.0 hz
                                                            ; - bit 0: 70.0 hz
                                                            ; 
FE04                  SYS_UPDATE_COUNT      equ    $FE04    ; (DWord) Update Count (Read Only)
FE08                  SYS_DBG_BRK_ADDR      equ    $FE08    ; (Word) Address of current debug breakpoint
FE0A                  SYS_DBG_FLAGS         equ    $FE0A    ; (Byte) Debug Specific Hardware Flags:
                                                            ; - bit 7: Debug Enable
                                                            ; - bit 6: Single Step Enable
                                                            ; - bit 5: Clear All Breakpoints
                                                            ; - bit 4: Update Breakpoint at DEBUG_BRK_ADDR
                                                            ; - bit 3: FIRQ  (on low {0} to high {1} edge)
                                                            ; - bit 2: IRQ   (on low {0} to high {1} edge)
                                                            ; - bit 1: NMI   (on low {0} to high {1} edge)
                                                            ; - bit 0: RESET (on low {0} to high {1} edge)
                                                            ; 
FE0A                  SYS_END               equ    $FE0A    ; End of System Registers
FE0B                  SYS_TOP               equ    $FE0B    ; Top of System Registers
                      ; _______________________________________________________________________
                      
FE0B                  GPU_DEVICE            equ    $FE0B    ; START: GPU Device Hardware Registers
FE0B                  GPU_MODE              equ    $FE0B    ; 
FE0B                  GPU_MODE_MSB          equ    $FE0B    ; (Byte) Graphics Display Mode
                                                            ; - bit  7   = Extended Display Enable:
                                                            ;               0: Disabled
                                                            ;               1: Enabled
                                                            ; - bit  6   = (reserved)
                                                            ; - bits 4-5 = Extended Color Depth:
                                                            ;               00: 2-Colors
                                                            ;               01: 4-Colors
                                                            ;               10: 16-Colors
                                                            ;               11: 256-Colors
                                                            ; - bit  3   = Extended Rendering Mode
                                                            ;               0: Tilemap Display
                                                            ;               1: Bitmap Display
                                                            ; - bit  2   = Emulation Screen Mode
                                                            ;               0: Windowed
                                                            ;               1: Fullscreen
                                                            ; - bit  1   = VSync Enable
                                                            ;               0: Disabled
                                                            ;               1: Enabled
                                                            ; - bit  0   = Presentation
                                                            ;               0: Letterbox
                                                            ;               1: Overscan / Stretch
                                                            ; 
FE0C                  GPU_MODE_LSB          equ    $FE0C    ; - bit  7   = Standard Display Enable
                                                            ;              0: Disabled
                                                            ;              1: Enabled
                                                            ; - bit  6    = (reserved)
                                                            ; - bits 4-5 = Standard Bitmap Color Depth:
                                                            ;               00: 2-Colors
                                                            ;               01: 4-Colors
                                                            ;               10: 16-Colors
                                                            ;               11: 256-Colors
                                                            ; - bit  3    = Standard Bitmap:
                                                            ;               0: Text Display
                                                            ;               1: Bitmap Display
                                                            ; - bit  2    = 0: 320/256 width,  1: 160/128 width
                                                            ; - bit  1    = 0: 200/160 height, 1: 160/80 height
                                                            ; - bit  0    = Base Resolution: 0:320x200, 1:256x160            
                                                            ; 
FE0D                  GPU_VIDEO_MAX         equ    $FE0D    ; (Word) Video Buffer Maximum (Read Only)
                                                            ;  Note: This will change to reflect
                                                            ;        the size of the last cpu
                                                            ;        accessible memory location
                                                            ;        of the currently active
                                                            ;        standard video mode.
                                                            ; 
FE0F                  GPU_HRES              equ    $FE0F    ; (Word) Horizontal Pixel Resolution (Read Only)
                                                            ;   Note: This will reflect the number of
                                                            ;        pixel columns for bitmap modes.
                                                            ; 
FE11                  GPU_VRES              equ    $FE11    ; (Word) Vertical Pixel Resolution (Read Only)
                                                            ;   Note: This will reflect the number of
                                                            ;        pixel rows for bitmap modes.
                                                            ; 
FE13                  GPU_TCOLS             equ    $FE13    ; (Byte) Text Horizontal Columns (Read Only)
                                                            ;   Note: This will reflect the number of
                                                            ;        glyph columns for text modes.
                                                            ; 
FE14                  GPU_TROWS             equ    $FE14    ; (Byte) Text Vertical Rows (Read Only)
                                                            ;   Note: This will reflect the number of
                                                            ;        glyph rows for text modes.
                                                            ; 
FE15                  GPU_PAL_INDEX         equ    $FE15    ; (Byte) Color Palette Index
                                                            ;   Note: Use this register to set the
                                                            ;        index into the Color Palette.
                                                            ;        Set this value prior referencing
                                                            ;        the color data (GPU_PAL_COLOR).
                                                            ; 
FE16                  GPU_PAL_COLOR         equ    $FE16    ; (Word) Color Palette Data (A4R4G4B4 format)
                                                            ;   Note: This is the color data for an
                                                            ;        individual palette entry. Write to 
                                                            ;        DSP_PAL_IDX with the index within the
                                                            ;        color palette prior to reading or
                                                            ;        writing the color data in the
                                                            ;        GFX_PAL_CLR register.
                                                            ; 
FE18                  GPU_GLYPH_IDX         equ    $FE18    ; (Byte) Text Glyph Index
                                                            ;   Note: Use this register to set the
                                                            ;        index of a specific text glyph.
                                                            ;        Set this value prior to updating
                                                            ;        the glyph data (GPU_GLYPH_DATA).
                                                            ; 
FE19                  GPU_GLYPH_DATA        equ    $FE19    ; (8-Bytes) 8 rows of binary encoded glyph pixel data
                                                            ;   Note: This is the pixel data for a
                                                            ;        specific text glyph. Each 8x8
                                                            ;        text glyph is composed of 8 bytes.
                                                            ;        The first byte in this array
                                                            ;        represents the top line of 8 pixels.
                                                            ;        Each array entry represents a row of 8 pixels.
                                                            ; 
FE20                  GPU_END               equ    $FE20    ; End of GPU Register Space
FE21                  GPU_TOP               equ    $FE21    ; Top of GPU Register Space
                      ; _______________________________________________________________________
                      
FE21                  CSR_DEVICE            equ    $FE21    ; START: Mouse Device Hardware Registers
FE21                  CSR_XPOS              equ    $FE21    ; (Word) Horizontal Mouse Cursor Coordinate
FE23                  CSR_YPOS              equ    $FE23    ; (Word) Vertical Mouse Cursor Coordinate
FE25                  CSR_XOFS              equ    $FE25    ; (Byte) Horizontal Mouse Cursor Offset
FE26                  CSR_YOFS              equ    $FE26    ; (Byte) Vertical Mouse Cursor Offset
FE27                  CSR_SCROLL            equ    $FE27    ; (char) MouseWheel Scroll: -1, 0, 1
FE28                  CSR_FLAGS             equ    $FE28    ; (Byte) Mouse Device State Flags
                                                            ;    bits 0-4: button states
                                                            ;    bits 5-6: number of clicks
                                                            ;    bits 7:   cursor enable
                                                            ; 
FE29                  CSR_BMP_INDX          equ    $FE29    ; (Byte) Mouse Cursor Bitmap Pixel Offset
FE2A                  CSR_BMP_DATA          equ    $FE2A    ; (Byte) Mouse Cursor Bitmap Pixel Color Data ($0-$F)
FE2B                  CSR_PAL_INDX          equ    $FE2B    ; (Byte) Mouse Cursor Color Palette Index (0-15)
FE2C                  CSR_PAL_DATA          equ    $FE2C    ; (Word) Mouse Cursor Color Palette Data A4R4G4B4
FE2D                  CSR_END               equ    $FE2D    ; End of Mouse Device Register Space
FE2E                  CSR_TOP               equ    $FE2E    ; Top of CSR Register Space
                      ; _______________________________________________________________________
                      
FE2E                  KEYBOARD_DEVICE       equ    $FE2E    ; START: Keyboard Device Hardware Registers
FE2E                  CHAR_Q_LEN            equ    $FE2E    ; (Byte) Number of Characters Waiting in Queue   (Read Only)
FE2F                  CHAR_SCAN             equ    $FE2F    ; (Byte) Read Next Character in Queue (Not Popped When Read)
FE30                  CHAR_POP              equ    $FE30    ; (Byte) Read Next Character in Queue     (Popped When Read)
FE31                  XKEY_BUFFER           equ    $FE31    ; (16 Bytes) 128 bits for XK_KEY data buffer     (Read Only)
FE41                  EDT_BFR_CSR           equ    $FE41    ; (Byte) Cursor Position Within Edit Buffer     (Read/Write)
FE42                  EDT_ENABLE            equ    $FE42    ; (Byte) Line Editor Enable Flag                (Read/Write)
FE43                  EDT_BFR_LEN           equ    $FE43    ; (Byte) Limit the Line Editor to This Length   (Read/Write)
FE43                  KEYBOARD_END          equ    $FE43    ; End of Keyboard Register Space
FE44                  KEYBOARD_TOP          equ    $FE44    ; Top of Keyboard Register Space
                      ; _______________________________________________________________________
                      
FE44                  JOYSTICK_DEVICE       equ    $FE44    ; START: Joystick/Gamepad Controller Device Hardware Registers
FE44                  JOYS_1_FLAGS          equ    $FE44    ; (Byte) Gamepad/Joystick #1 Condition Flags:     (Read Only)
                                                            ;            0000'0000: Not Connected
                                                            ;            0000'1111: Controller Type
                                                            ;            0001'0000: (reserved)
                                                            ;            0010'0000: (reserved)
                                                            ;            0100'0000: Is a Gamepad
                                                            ;            1000'0000: Is a Joystick
                                                            ; 
                                                            ;        Gamepad Controller Type (bits 0-3):
                                                            ;            0:  Unknown
                                                            ;            1:  Standard
                                                            ;            2:  Xbox360
                                                            ;            3:  XboxOne
                                                            ;            4:  PS3
                                                            ;            5:  PS4
                                                            ;            6:  PS5
                                                            ;            7:  Nintendo Switch Pro
                                                            ;            8:  Nintendo Switch Joycon Left
                                                            ;            9:  Nintendo Switch Joycon Right
                                                            ; 
                                                            ;        Joystick Controller Type (bits 0-3):
                                                            ;            0:  Unknown
                                                            ;            1:  Gamepad
                                                            ;            2:  Wheel
                                                            ;            3:  Arcade Stick
                                                            ;            4:  Flight Stick
                                                            ;            5:  Dance Pad
                                                            ;            6:  Guitar
                                                            ;            7:  Drum Kit
                                                            ;            8:  Arcade Pad
                                                            ;            9:  Throttle
                                                            ; 
FE45                  JOYS_1_BTN            equ    $FE45    ; (Word) Gamepad Controller Button Bits:         (Read Only)
                                                            ;            0000'0000'0000'0000 = Nothing Pressed
                                                            ;            0000'0000'0000'0001 = A
                                                            ;            0000'0000'0000'0010 = B
                                                            ;            0000'0000'0000'0100 = X
                                                            ;            0000'0000'0000'1000 = Y
                                                            ;            0000'0000'0001'0000 = L.Shoulder
                                                            ;            0000'0000'0010'0000 = R.Shoulder
                                                            ;            0000'0000'0100'0000 = Back
                                                            ;            0000'0000'1000'0000 = Start
                                                            ;            0000'0001'0000'0000 = Misc 1
                                                            ;            0000'0010'0000'0000 = Misc 2
                                                            ;            0000'0100'0000'0000 = Misc 3
                                                            ;            0000'1000'0000'0000 = Guide
                                                            ;            0001'0000'0000'0000 = DPad Up   
                                                            ;            0010'0000'0000'0000 = DPad Down 
                                                            ;            0100'0000'0000'0000 = DPad Left 
                                                            ;            1000'0000'0000'0000 = DPad Right
                                                            ;            1111'1111'1111'1111 = Not Connected
                                                            ; 
FE47                  JOYS_1_DBND           equ    $FE47    ; (Byte) PAD 1 analog deadband; default is 5   (read/write)
FE48                  JOYS_1_LTX            equ    $FE48    ; (char) PAD 1 LThumb-X position (-128 _ +127)   (realtime)
FE49                  JOYS_1_LTY            equ    $FE49    ; (char) PAD 1 LThumb-Y position (-128 _ +127)   (realtime)
FE4A                  JOYS_1_RTX            equ    $FE4A    ; (char) PAD 1 RThumb-X position (-128 _ +127)   (realtime)
FE4B                  JOYS_1_RTY            equ    $FE4B    ; (char) PAD 1 RThumb-Y position (-128 _ +127)   (realtime)
FE4C                  JOYS_1_Z1             equ    $FE4C    ; (char) PAD 1 left analog trigger (0 - 127)     (realtime)
FE4D                  JOYS_1_Z2             equ    $FE4D    ; (char) PAD 1 left analog trigger (0 - 127)     (realtime)
                                                            ; 
FE4E                  JOYS_2_FLAGS          equ    $FE4E    ; (Byte) Gamepad/Joystick #2 Condition Flags:     (Read Only)
                                                            ;            0000'0000: Not Connected
                                                            ;            0000'1111: Controller Type
                                                            ;            0001'0000: (reserved)
                                                            ;            0010'0000: (reserved)
                                                            ;            0100'0000: Is a Gamepad
                                                            ;            1000'0000: Is a Joystick
                                                            ; 
                                                            ;        Gamepad Controller Type (bits 0-3):
                                                            ;            0:  Unknown
                                                            ;            1:  Standard
                                                            ;            2:  Xbox360
                                                            ;            3:  XboxOne
                                                            ;            4:  PS3
                                                            ;            5:  PS4
                                                            ;            6:  PS5
                                                            ;            7:  Nintendo Switch Pro
                                                            ;            8:  Nintendo Switch Joycon Left
                                                            ;            9:  Nintendo Switch Joycon Right
                                                            ; 
                                                            ;        Joystick Controller Type (bits 0-3):
                                                            ;            0:  Unknown
                                                            ;            1:  Gamepad
                                                            ;            2:  Wheel
                                                            ;            3:  Arcade Stick
                                                            ;            4:  Flight Stick
                                                            ;            5:  Dance Pad
                                                            ;            6:  Guitar
                                                            ;            7:  Drum Kit
                                                            ;            8:  Arcade Pad
                                                            ;            9:  Throttle
                                                            ; 
FE4F                  JOYS_2_BTN            equ    $FE4F    ; (Word) Button Bits: Room For up to 16 Buttons  (realtime)
                                                            ;        Joystick Button Bits:
                                                            ;            0000'0000'0000'0000 = Nothing Pressed
                                                            ;            0000'0000'0000'0001 = Button 1 
                                                            ;            0000'0000'0000'0010 = Button 2 
                                                            ;            0000'0000'0000'0100 = Button 3 
                                                            ;            0000'0000'0000'1000 = Button 4 
                                                            ;            0000'0000'0001'0000 = Button 5 
                                                            ;            0000'0000'0010'0000 = Button 6 
                                                            ;            0000'0000'0100'0000 = Button 7 
                                                            ;            0000'0000'1000'0000 = Button 8 
                                                            ;            0000'0001'0000'0000 = Button 9 
                                                            ;            0000'0010'0000'0000 = Button 10
                                                            ;            0000'0100'0000'0000 = Button 11
                                                            ;            0000'1000'0000'0000 = Button 12
                                                            ;            0001'0000'0000'0000 = Hat Up   
                                                            ;            0010'0000'0000'0000 = Hat Down 
                                                            ;            0100'0000'0000'0000 = Hat Left 
                                                            ;            1000'0000'0000'0000 = Hat Right
                                                            ;            1111'1111'1111'1111 = Not Connected
                                                            ; 
FE51                  JOYS_2_DBND           equ    $FE51    ; (Byte) PAD 2 analog deadband; default is 5   (read/write)
FE52                  JOYS_2_LTX            equ    $FE52    ; (char) PAD 2 LThumb-X position (-128 _ +127)   (realtime)
FE53                  JOYS_2_LTY            equ    $FE53    ; (char) PAD 2 LThumb-Y position (-128 _ +127)   (realtime)
FE54                  JOYS_2_RTX            equ    $FE54    ; (char) PAD 2 RThumb-X position (-128 _ +127)   (realtime)
FE55                  JOYS_2_RTY            equ    $FE55    ; (char) PAD 2 RThumb-Y position (-128 _ +127)   (realtime)
FE56                  JOYS_2_Z1             equ    $FE56    ; (char) PAD 2 left analog trigger (0 - 127)     (realtime)
FE57                  JOYS_2_Z2             equ    $FE57    ; (char) PAD 2 left analog trigger (0 - 127)     (realtime)
FE57                  JOYS_END              equ    $FE57    ; End of Joystick/Gamepad Device Register Space
FE58                  JOYS_TOP              equ    $FE58    ; Top of Joystick/Gamepad Device Register Space
                      ; _______________________________________________________________________
                      
FE58                  FIO_DEVICE            equ    $FE58    ; START: File I/O Device Hardware Registers
FE58                  FIO_ERROR             equ    $FE58    ; (Byte) FILE_ERROR enumeration result (FE_<error>)
                                                            ; 
0000                  FE_BEGIN              equ    $0000    ;   Begin FILE_ERROR enumeration 
0000                  FE_NOERROR            equ    $0000    ;      no error, condition normal
0001                  FE_NOTFOUND           equ    $0001    ;      file or folder not found  
0002                  FE_NOTOPEN            equ    $0002    ;      file not open             
0003                  FE_EOF                equ    $0003    ;      end of file               
0004                  FE_OVERRUN            equ    $0004    ;      buffer overrun            
0005                  FE_WRONGTYPE          equ    $0005    ;      wrong file type           
0006                  FE_BAD_CMD            equ    $0006    ;      invalid command           
0007                  FE_BADSTREAM          equ    $0007    ;      invalid file stream       
0007                  FE_NOT_EMPTY          equ    $0007    ;      directory not empty       
0007                  FE_FILE_EXISTS        equ    $0007    ;      file already exists       
0007                  FE_INVALID_NAME       equ    $0007    ;      invalid file name         
0007                  FE_LAST               equ    $0007    ;   End of FILE_ERROR enumeration
                                                            ; 
FE59                  FIO_COMMAND           equ    $FE59    ; (Byte) Execute a File Command (FC_<cmd>)
                                                            ; 
0000                  FC_BEGIN              equ    $0000    ;   Begin FIO_COMMAND enumeration           
0000                  FC_RESET              equ    $0000    ;     Reset                                 
0001                  FC_SHUTDOWN           equ    $0001    ;     SYSTEM: Shutdown                      
0002                  FC_COMPDATE           equ    $0002    ;     SYSTEM: Load Compilation Date         
0003                  FC_FILEEXISTS         equ    $0003    ;     Does File Exist (return in FIO_IODATA)
0004                  FC_OPENREAD           equ    $0004    ;     Open Binary File For Reading          
0005                  FC_OPENWRITE          equ    $0005    ;     Open Binary File For Writing          
0006                  FC_OPENAPPEND         equ    $0006    ;     Open Binary File For Appending        
0007                  FC_CLOSEFILE          equ    $0007    ;     Close File                            
0008                  FC_READBYTE           equ    $0008    ;     Read Byte (into FIO_IOBYTE)           
0009                  FC_WRITEBYTE          equ    $0009    ;     Write Byte (from FIO_IOBYTE)          
000A                  FC_LOADHEX            equ    $000A    ;     Load Hex Format File                  
000B                  FC_GETLENGTH          equ    $000B    ;     Get File Length (into FIO_IOWORD)     
000C                  FC_LISTDIR            equ    $000C    ;     List Directory                        
000D                  FC_MAKEDIR            equ    $000D    ;     Make Directory                        
000E                  FC_CHANGEDIR          equ    $000E    ;     Change Directory                      
000F                  FC_GETPATH            equ    $000F    ;     Fetch Current Path                    
0010                  FC_REN_DIR            equ    $0010    ;     Rename Directory                      
0011                  FC_DEL_DIR            equ    $0011    ;     Delete Directory                      
0012                  FC_DEL_FILE           equ    $0012    ;     Delete File                           
0013                  FC_REN_FILE           equ    $0013    ;     Rename File                           
0014                  FC_COPY_FILE          equ    $0014    ;     Copy File                             
0015                  FC_SEEK_START         equ    $0015    ;     Seek Start                            
0016                  FC_SEEK_END           equ    $0016    ;     Seek End                              
0017                  FC_SET_SEEK           equ    $0017    ;     Set Seek Position (from FIO_IOWORD)   
0018                  FC_GET_SEEK           equ    $0018    ;     Get Seek Position (into FIO_IOWORD)   
0018                  FC_LAST               equ    $0018    ;   End FIO_COMMAND enumeration             
                                                            ; 
FE5A                  FIO_HANDLE            equ    $FE5A    ; (Byte) Current File Stream HANDLE (0=NONE)
FE5B                  FIO_SEEKPOS           equ    $FE5B    ; (DWord) File Seek Position
FE5F                  FIO_IODATA            equ    $FE5F    ; (Byte) Input / Output Data
                                                            ; 
FE60                  FIO_PATH_LEN          equ    $FE60    ; (Byte) Length of the Primary Filepath        (Read Only)
FE61                  FIO_PATH_POS          equ    $FE61    ; (Byte) Character Position Within the Primary Filepath
FE62                  FIO_PATH_DATA         equ    $FE62    ; (Byte) Data at the Character Position of the Primary Path
                                                            ; 
FE63                  FIO_ALT_PATH_LEN      equ    $FE63    ; (Byte) Length of the alternate Filepath        (Read Only)
FE64                  FIO_ALT_PATH_POS      equ    $FE64    ; (Byte) Character Position Within the Alternate Filepath
FE65                  FIO_ALT_PATH_DATA     equ    $FE65    ; (Byte) Data at the Character Position of the Alternate Path
                                                            ; 
FE66                  FIO_DIR_DATA          equ    $FE66    ; (Byte) A Series of Null-Terminated Filenames
                                                            ;   NOTE: Current read-position is reset to the beginning
                                                            ;     following a List Directory command. The read-position
                                                            ;     is automatically advanced on read from this register.
                                                            ;     Each filename is $0A-terminated. The list itself is
                                                            ;     null-terminated.
                                                            ; 
FE66                  FIO_END               equ    $FE66    ; End of FIO Device Register Space
FE67                  FIO_TOP               equ    $FE67    ; Top of FIO Device Register Space
                      ; _______________________________________________________________________
                      
FE67                  MATH_DEVICE           equ    $FE67    ; START: Math Co-Processor Device Hardware Registers
FE67                  MATH_ACA_POS          equ    $FE67    ; (Byte) Character Position Within the ACA Float String
FE68                  MATH_ACA_DATA         equ    $FE68    ; (Byte) ACA Float String Character Port
FE69                  MATH_ACA_RAW          equ    $FE69    ; (4-Bytes) ACA Raw Float Data
FE6D                  MATH_ACA_INT          equ    $FE6D    ; (4-Bytes) ACA Integer Data
                                                            ; 
FE71                  MATH_ACB_POS          equ    $FE71    ; (Byte) Character Position Within the ACB Float String
FE72                  MATH_ACB_DATA         equ    $FE72    ; (Byte) ACB Float String Character Port
FE73                  MATH_ACB_RAW          equ    $FE73    ; (4-Bytes) ACB Raw Float Data
FE77                  MATH_ACB_INT          equ    $FE77    ; (4-Bytes) ACB Integer Data
                                                            ; 
FE7B                  MATH_ACR_POS          equ    $FE7B    ; (Byte) Character Position Within the ACR Float String
FE7C                  MATH_ACR_DATA         equ    $FE7C    ; (Byte) ACR Float String Character Port
FE7D                  MATH_ACR_RAW          equ    $FE7D    ; (4-Bytes) ACR Raw Float Data
FE81                  MATH_ACR_INT          equ    $FE81    ; (4-Bytes) ACR Integer Data
                                                            ; 
FE85                  MATH_OPERATION        equ    $FE85    ; (Byte) ACA Float String Character Port   (On Write)
0000                  MOP_BEGIN             equ    $0000    ;   BEGIN Math Operation Enumeration:
0000                  MOP_RANDOM            equ    $0000    ;     ACA, ACB, and ACR are set to randomized values
0001                  MOP_RND_SEED          equ    $0001    ;     MATH_ACA_INT seeds the pseudo-random number generator
0002                  MOP_IS_EQUAL          equ    $0002    ;     (bool)ACR = (ACA == ACB)
0003                  MOP_IS_NOT_EQUAL      equ    $0003    ;     (bool)ACR = (ACA != ACB)
0004                  MOP_IS_LESS           equ    $0004    ;     (bool)ACR = std::isless(ACA, ACB)
0005                  MOP_IS_GREATER        equ    $0005    ;     (bool)ACR = std::isgreater(ACA, ACB)
0006                  MOP_IS_LTE            equ    $0006    ;     (bool)ACR = std::islessequal(ACA, ACB)
0007                  MOP_IS_GTE            equ    $0007    ;     (bool)ACR = std::islessgreater(ACA, ACB)
0008                  MOP_IS_FINITE         equ    $0008    ;     (bool)ACR = std::isfinite(ACA)
0009                  MOP_IS_INF            equ    $0009    ;     (bool)ACR = std::isinf(ACA)
000A                  MOP_IS_NAN            equ    $000A    ;     (bool)ACR = std::isnan(ACA)
000B                  MOP_IS_NORMAL         equ    $000B    ;     (bool)ACR = std::isnormal(ACA)
000C                  MOP_SIGNBIT           equ    $000C    ;     (bool)ACR = std::signbit(ACA)
000D                  MOP_SUBTRACT          equ    $000D    ;     ACR = ACA - ACB
000E                  MOP_ADD               equ    $000E    ;     ACR = ACA + ACB
000F                  MOP_MULTIPLY          equ    $000F    ;     ACR = ACA * ACB
0010                  MOP_DIVIDE            equ    $0010    ;     ACR = ACA / ACB
0011                  MOP_FMOD              equ    $0011    ;     ACR = std::fmod(ACA, ACB)
0012                  MOP_REMAINDER         equ    $0012    ;     ACR = std::remainder(ACA, ACB)
0013                  MOP_FMAX              equ    $0013    ;     ACR = std::fmax(ACA, ACB)
0014                  MOP_FMIN              equ    $0014    ;     ACR = std::fmin(ACA, ACB)
0015                  MOP_FDIM              equ    $0015    ;     ACR = std::fdim(ACA, ACB)
0016                  MOP_EXP               equ    $0016    ;     ACR = std::exp(ACA)
0017                  MOP_EXP2              equ    $0017    ;     ACR = std::exp2(ACA)
0018                  MOP_EXPM1             equ    $0018    ;     ACR = std::expm1(ACA)
0019                  MOP_LOG               equ    $0019    ;     ACR = std::log(ACA)
001A                  MOP_LOG10             equ    $001A    ;     ACR = std::log10(ACA)
001B                  MOP_LOG2              equ    $001B    ;     ACR = std::log2(ACA)
001C                  MOP_LOG1P             equ    $001C    ;     ACR = std::log1p(ACA)
001D                  MOP_SQRT              equ    $001D    ;     ACR = std::sqrt(ACA)
001E                  MOP_CBRT              equ    $001E    ;     ACR = std::cbrt(ACA)
001F                  MOP_HYPOT             equ    $001F    ;     ACR = std::hypot(ACA, ACB)
0020                  MOP_POW               equ    $0020    ;     ACR = std::pow(ACA, ACB)
0021                  MOP_SIN               equ    $0021    ;     ACR = std::sin(ACA)
0022                  MOP_COS               equ    $0022    ;     ACR = std::cos(ACA)
0023                  MOP_TAN               equ    $0023    ;     ACR = std::tan(ACA)
0024                  MOP_ASIN              equ    $0024    ;     ACR = std::asin(ACA)
0025                  MOP_ACOS              equ    $0025    ;     ACR = std::acos(ACA)
0026                  MOP_ATAN              equ    $0026    ;     ACR = std::atan(ACA)
0027                  MOP_ATAN2             equ    $0027    ;     ACR = std::atan2(ACA, ACB)
0028                  MOP_SINH              equ    $0028    ;     ACR = std::sinh(ACA)
0029                  MOP_COSH              equ    $0029    ;     ACR = std::acosh(ACA)
002A                  MOP_ATANH             equ    $002A    ;     ACR = std::atanh(ACA)
002B                  MOP_ERF               equ    $002B    ;     ACR = std::erf(ACA)
002C                  MOP_ERFC              equ    $002C    ;     ACR = std::erfc(ACA)
002D                  MOP_LGAMMA            equ    $002D    ;     ACR = std::lgamma(ACA)
002E                  MOP_TGAMMA            equ    $002E    ;     ACR = std::tgamma(ACA)
002F                  MOP_CEIL              equ    $002F    ;     ACR = std::ceil(ACA)
0030                  MOP_FLOOR             equ    $0030    ;     ACR = std::floor(ACA)
0031                  MOP_TRUNC             equ    $0031    ;     ACR = std::trunc(ACA)
0032                  MOP_ROUND             equ    $0032    ;     ACR = std::round(ACA)
0033                  MOP_LROUND            equ    $0033    ;     ACR = std::lround(ACA)
0034                  MOP_NEARBYINT         equ    $0034    ;     ACR = std::nearbyint(ACA)
0035                  MOP_ILOGB             equ    $0035    ;     ACR = std::ilogb(ACA)
0036                  MOP_LOGB              equ    $0036    ;     ACR = std::logb(ACA)
0037                  MOP_NEXTAFTER         equ    $0037    ;     ACR = std::nextafter(ACA, ACB)
0038                  MOP_COPYSIGN          equ    $0038    ;     ACR = std::copysign(ACA, ACB)
0039                  MOP_LASTOP            equ    $0039    ;   END Math Operation Enumeration
FE85                  MATH_END              equ    $FE85    ; End of Math Co-Processor Register Space
FE86                  MATH_TOP              equ    $FE86    ; Top of Math Co-Processor Register Space
                      ; _______________________________________________________________________
                      
FE86                  MMU_DEVICE            equ    $FE86    ; START: Memory Management Unit Hardware Registers
FE86                  MMU_PAGE_1_SELECT     equ    $FE86    ; (Word) Page Select for 8K Memory Bank 1
FE88                  MMU_PAGE_2_SELECT     equ    $FE88    ; (Word) Page Select for 8K Memory Bank 2
FE8A                  MMU_BLOCKS_FREE       equ    $FE8A    ; (Word) Number of 32-Byte Blocks Available for Allocation (Read Only)
FE8C                  MMU_BLOCKS_ALLOCATED  equ    $FE8C    ; (Word) Number of 32-Byte Blocks Currently Allocated  (Read Only)
FE8E                  MMU_BLOCKS_FRAGGED    equ    $FE8E    ; (Word) Number of 32-Byte Blocks Currently Fragmented  (Read Only)
FE90                  MMU_ARG_1             equ    $FE90    ; (Word) Argument 1 for MMU Command
FE90                  MMU_ARG_1_MSB         equ    $FE90    ; (Byte) Argument 1 Most Significant Byte for MMU Command
FE91                  MMU_ARG_1_LSB         equ    $FE91    ; (Byte) Argument 1 Least Significant Byte for MMU Command
FE92                  MMU_ARG_2             equ    $FE92    ; (Word) Argument 2 for MMU Command
FE92                  MMU_ARG_2_MSB         equ    $FE92    ; (Byte) Argument 2 Most Significant Byte for MMU Command
FE93                  MMU_ARG_2_LSB         equ    $FE93    ; (Byte) Argument 2 Least Significant Byte for MMU Command
                                                            ; 
FE94                  MMU_COMMAND           equ    $FE94    ; (Byte) Memory Management Unit Command:
0000                  MMU_CMD_NOP           equ    $0000    ;    $00 = No Operation / Error
0001                  MMU_CMD_PG_ALLOC      equ    $0001    ;    $01 = Page Allocate (8K Bytes)
0002                  MMU_CMD_PG_FREE       equ    $0002    ;    $02 = Page Deallocate (8K Bytes)
0003                  MMU_CMD_ALLOC         equ    $0003    ;    $03 = Allocate Chain (< 8K Bytes)
0004                  MMU_CMD_FREE          equ    $0004    ;    $04 = Deallocate Chain (< 8K Bytes)
0005                  MMU_CMD_LOAD_ROOT     equ    $0005    ;    $05 = Load Root Node
0006                  MMU_CMD_LOAD_NEXT     equ    $0006    ;    $06 = Load Next Node
0007                  MMU_CMD_LOAD_PREV     equ    $0007    ;    $07 = Load Prev Node
0008                  MMU_CMD_LOAD_LAST     equ    $0008    ;    $08 = Load Last Node
0009                  MMU_CMD_DEL_NODE      equ    $0009    ;    $09 = Remove Current Node (and Adjust Links)
000A                  MMU_CMD_INS_BEFORE    equ    $000A    ;    $0A = Insert Node Before (and activate)
000B                  MMU_CMD_INS_AFTER     equ    $000B    ;    $0B = Insert Node After (and activate)
000C                  MMU_CMD_PUSH_BACK     equ    $000C    ;    $0C = Push Back (and activate)
000D                  MMU_CMD_PUSH_FRONT    equ    $000D    ;    $0D = Push Front (and activate)
000E                  MMU_CMD_POP_BACK      equ    $000E    ;    $0E = Pop Back (and activate)
000F                  MMU_CMD_POP_FRONT     equ    $000F    ;    $0F = Pop Front (and activate)
0010                  MMU_CMD_LOCK_NODE     equ    $0010    ;    $10 = Lock Node
0011                  MMU_CMD_UNLOCK_NODE   equ    $0011    ;    $11 = Unlock Node
0012                  MMU_CMD_DEFRAG        equ    $0012    ;    $12 = Defragment / Collect Garbage
0013                  MMU_CMD_RESET         equ    $0013    ;    $13 = Reset Memory Management Unit
0014                  MMU_CMD_SIZE          equ    $0014    ;    $14 = Total Number of MMU Commands
                                                            ; 
FE95                  MMU_ERROR             equ    $FE95    ; (Byte) Memory Management Unit Error Code:     (Read Only)
0000                  MMU_ERR_NONE          equ    $0000    ;    $00 = No Error
0001                  MMU_ERR_OUTOFMEM      equ    $0001    ;    $01 = Out of Memory Error
0002                  MMU_ERR_ALLOC         equ    $0002    ;    $02 = Failed to Allocate Memory
0003                  MMU_ERR_FREE          equ    $0003    ;    $03 = Failed to Deallocate Memory
0004                  MMU_ERR_PG_FREE       equ    $0004    ;    $04 = Error Deallocating Page
0005                  MMU_ERR_INVALID       equ    $0005    ;    $05 = Invalid Command
0006                  MMU_ERR_ARGUMENT      equ    $0006    ;    $06 = Invalid Argument
0007                  MMU_ERR_HANDLE        equ    $0007    ;    $07 = Invalid Handle
0008                  MMU_ERR_NODE          equ    $0008    ;    $08 = Invalid Node
0009                  MMU_ERR_PAGE          equ    $0009    ;    $09 = Invalid Page
000A                  MMU_ERR_BANK          equ    $000A    ;    $0A = Invalid Bank
000B                  MMU_ERR_ADDRESS       equ    $000B    ;    $0B = Invalid Address
000C                  MMU_ERR_OFFSET        equ    $000C    ;    $0C = Invalid Offset
000D                  MMU_ERR_LENGTH        equ    $000D    ;    $0D = Invalid Length
000E                  MMU_ERR_INDEX         equ    $000E    ;    $0E = Invalid Index
000F                  MMU_ERR_UNKNOWN       equ    $000F    ;    $0F = Unknown Error
0010                  MMU_ERR_SIZE          equ    $0010    ;    $10 = Total Number of MMU Errors
                                                            ; 
FE96                  MMU_META_HANDLE       equ    $FE96    ; (Word) Handle for the current allocation chain
                                                            ; 
FE98                  MMU_META_STATUS       equ    $FE98    ; (Byte) Status Flags:
0001                  MMU_STFLG_ALLOC       equ    $0001    ;    0000'0001: Is Allocated: 0 = Free, 1 = Allocated
0002                  MMU_STFLG_PAGED       equ    $0002    ;    0000'0010: Paged Memory: 0 = No,   1 = Yes
0004                  MMU_STFLG_READONLY    equ    $0004    ;    0000'0100: Memory Type:  0 = RAM,  1 = ROM
0008                  MMU_STFLG_FRAGD       equ    $0008    ;    0000'1000: Fragmented:   0 = No,   1 = Yes
0010                  MMU_STFLG_LOCKED      equ    $0010    ;    0001'0000: Locked:       0 = No,   1 = Yes
0020                  MMU_STFLG_RES_1       equ    $0020    ;    0010'0000:   (reserved)
0040                  MMU_STFLG_RES_2       equ    $0040    ;    0100'0000:   (reserved)
0080                  MMU_STFLG_ERROR       equ    $0080    ;    1000'0000: Error:        0 = No,   1 = Yes
                                                            ; 
FE99                  MMU_META_DATA         equ    $FE99    ; (32-Bytes) Data Window for the Current Allocation
FEB9                  MMU_META_ROOT         equ    $FEB9    ; (Word) Root node of the current allocation       (Read Only)
FEBB                  MMU_META_PREV         equ    $FEBB    ; (Word) Previous node of the current allocation   (Read Only)
FEBD                  MMU_META_NEXT         equ    $FEBD    ; (Word) Next node of the current allocation       (Read Only)
FEBF                  MMU_RAW_INDEX         equ    $FEBF    ; (Word) Raw Index of the current memory node  (For Debugging)
                                                            ; 
FEC0                  MMU_END               equ    $FEC0    ; End of Banked Memory Register Space
FEC1                  MMU_TOP               equ    $FEC1    ; Top of Banked Memory Register Space
                      ; _______________________________________________________________________
                      
FEC1                  HDW_RESERVED_DEVICE   equ    $FEC1    ; START: Reserved Register Space
FFF0                  HDW_REG_END           equ    $FFF0    ; 303 bytes reserved for future use.
                      ; _______________________________________________________________________
                      
FFF0                  ROM_VECTS_DEVICE      equ    $FFF0    ; START: Hardware Interrupt Vectors
FFF0                  HARD_EXEC             equ    $FFF0    ; EXEC Hardware Interrupt Vector
FFF2                  HARD_SWI3             equ    $FFF2    ; SWI3 Hardware Interrupt Vector
FFF4                  HARD_SWI2             equ    $FFF4    ; SWI2 Hardware Interrupt Vector
FFF6                  HARD_FIRQ             equ    $FFF6    ; FIRQ Hardware Interrupt Vector
FFF8                  HARD_IRQ              equ    $FFF8    ; IRQ Hardware Interrupt Vector
FFFA                  HARD_SWI              equ    $FFFA    ; SWI / SYS Hardware Interrupt Vector
FFFC                  HARD_NMI              equ    $FFFC    ; NMI Hardware Interrupt Vector
FFFE                  HARD_RESET            equ    $FFFE    ; RESET Hardware Interrupt Vector
                      
                      
                      ; END of memory_map.asm definitions
                      
                      
                      
                      ; sys macro expands to SWI2 with a following command byte
                      sys                 macro
                                          swi2
                                          fcb \1
                                          endm
                      
                      
                      ; *****************************************************************************
                      ; * SYSTEM SOFTWARE VECTORS                                                   *
                      ; *****************************************************************************
0000                  VEC_EXEC            equ     $0000       ; User defined EXEC vector
0002                  VEC_SWI3            equ     $0002       ; SWI3 Software Interrupt Vector
0004                  VEC_SWI2            equ     $0004       ; SWI2 Software Interrupt Vector
0006                  VEC_FIRQ            equ     $0006       ; FIRQ Software Interrupt Vector
0008                  VEC_IRQ             equ     $0008       ; IRQ Software Interrupt Vector
000A                  VEC_SWI             equ     $000A       ; SWI / SYS Software Interrupt Vector
000C                  VEC_NMI             equ     $000C       ; NMI Software Interrupt Vector
000E                  VEC_RESET           equ     $000E       ; RESET Software Interrupt Vector
                      
                      ; *****************************************************************************
                      ; * KERNAL ROUTINE SOFTWARE VECTORS                                           *
                      ; *****************************************************************************
0010                  VEC_CLS             equ     $0010       ; CLS function Software Vector
0012                  VEC_CHROUT          equ     $0012       ; Character Out Software Vector
0014                  VEC_NEWLINE         equ     $0014       ; Kernel Newline Software Vector
0016                  VEC_LINEOUT         equ     $0016       ; String to Console Software Vector
0018                  VEC_CSRPOS          equ     $0018       ; Cursor Position Software Vector
001A                  VEC_SCROLL          equ     $001A       ; Scroll Text Screen Software Vector
001C                  VEC_LINEEDIT        equ     $001C       ; Console Line Editor Software Vector
001E                  VEC_GETKEY          equ     $001E       ; Wait for Key Press Software Vector
0020                  VEC_GETHEX          equ     $0020       ; Wait for Hex Character Software Vector
0022                  VEC_GETNUM          equ     $0022       ; Wait for Numeric Character Vector
0024                  VEC_CMPSTR          equ     $0024       ; Compare two strings of arbitrary lengths Vector
0026                  VEC_CMD_PROC        equ     $0026       ; Parse the command entered by the user Vector
0028                  VEC_TBLSEARCH       equ     $0028       ; Table Search and Return index Vector
002A                  VEC_CPY_DWORD       equ     $002A       ; Copy 32-bits from addr X addr Y Vector
002C                  VEC_D_TO_RAWA       equ     $002C       ; Write the D register to RAWA  Vector
002E                  VEC_D_TO_RAWB       equ     $002E       ; Write the D register to RAWB Vector
0030                  VEC_D_TO_RAWR       equ     $0030       ; Write the D register to RAWR Vector
0032                  VEC_D_TO_INTA       equ     $0032       ; Write the D register to INTA Vector
0034                  VEC_D_TO_INTB       equ     $0034       ; Write the D register to INTB Vector
0036                  VEC_D_TO_INTR       equ     $0036       ; Write the D register to INTR Vector
0038                  VEC_RAWA_TO_D       equ     $0038       ; Read the RAWA float into D Vector
003A                  VEC_RAWB_TO_D       equ     $003A       ; Read the RAWB float into D Vector
003C                  VEC_RAWR_TO_D       equ     $003C       ; Read the RAWD float into D Vector
003E                  VEC_INTA_TO_D       equ     $003E       ; Read the INTA integer into D Vector
0040                  VEC_INTB_TO_D       equ     $0040       ; Read the INTB integer into D Vector
0042                  VEC_INTR_TO_D       equ     $0042       ; Read the INTR integer into D Vector
0044                  VEC_8BIT_MATH       equ     $0044       ; 8-bit integer math Vector
0046                  VEC_DSP_ACA         equ     $0046       ; Send to console the float in ACA Vector
0048                  VEC_DSP_ACB         equ     $0048       ; Send to console the float in ACB Vector
004A                  VEC_DSP_ACR         equ     $004A       ; Send to console the float in ACA Vector
004C                  VEC_DSP_INTA        equ     $004C       ; Send to console the integer in ACA Vector
004E                  VEC_DSP_INTB        equ     $004E       ; Send to console the integer in ACB Vector
0050                  VEC_DSP_INTR        equ     $0050       ; Send to console the integer in ACR Vector
0052                  VEC_WRITE_ACA       equ     $0052       ; Write RAW float X points to into ACA Vector
0054                  VEC_WRITE_ACB       equ     $0054       ; Write RAW float X points to into ACB Vector
0056                  VEC_WRITE_ACR       equ     $0056       ; Write RAW float X points to into ACR Vector
0058                  VEC_ARG_TO_A        equ     $0058       ; Convert numeric string to binary in A Vector
                      
                      
                      ; *****************************************************************************
                      ; * RESERVED ZERO PAGE KERNAL VARIABLES                                       *
                      ; *****************************************************************************
005A                  _CURSOR_COL         equ     $005A       ; (Byte) current cursor horizontal position
005B                  _CURSOR_ROW         equ     $005B       ; (Byte) current cursor vertical position
005C                  _ATTRIB             equ     $005C       ; (Byte) current character display attribute
005D                  _ANCHOR_COL         equ     $005D       ; (Byte) line edit anchor column
005E                  _ANCHOR_ROW         equ     $005E       ; (Byte) line edit anchor row
005F                  _LOCAL_0            equ     $005F       ; (Byte) used locally for some kernel calls
0060                  _LOCAL_1            equ     $0060       ; (Byte) used locally for some kernel calls
0061                  _LOCAL_2            equ     $0061       ; (Byte) used locally for some kernel calls
0062                  _LOCAL_3            equ     $0062       ; (Byte) used locally for some kernel calls
                      
0063                  ZERO_PAGE_USER      equ     _LOCAL_3+1  ; start of user appropriate zero-page memory
                      
                      
                      ; *******************************************************************************
                      ; * SYS CALL CONSTANTS                                                          *
                      ; *     usage:                                                                  *
                      ; *             sys     CALL_CLS        ; clear the screen                      *
                      ; *             ...                                                             *
                      ; *                                                                             *
                      ; *             lda     #'Z'            ; Load the text glyph 'Z' into A        *
                      ; *             sys     CALL_CHROUT     ; Display the 'Z' on the text screen    *
                      ; *             ...                                                             *
                      ; *                                                                             *
                      ; *                                                                             *
                      ; *             sys     CALL_LINEOUT    ; Display Null-terminated string        *
                      ; *                                     ; pointed to by X at the current        *
                      ; *                                     ; cursor location:                      *
                      ; *                                             _CURSOR_COL x _CURSOR_ROW       *
                      ; *             ...                                                             *
                      ; *******************************************************************************
0000                  CALL_GARBAGE        equ     $00     ; $00 random garbage
0001                  CALL_CLS            equ     $01         ; $01 CLS
0002                  CALL_CHROUT         equ     $02     ; $02 CHROUT
0003                  CALL_NEWLINE        equ     $03         ; $03 NEWLINE
0004                  CALL_TAB            equ     $04         ; $04 TAB
0005                  CALL_LINEOUT        equ     $05         ; $05 LINEOUT
0006                  CALL_CSRPOS         equ     $06         ; $06 CSRPOS
0007                  CALL_SCROLL         equ     $07         ; $07 SCROLL
0008                  CALL_LINEEDIT       equ     $08     ; $08 LINEEDIT
0009                  CALL_GETKEY         equ     $09     ; $09 GETKEY
000A                  CALL_GETHEX         equ     $0A     ; $0A GETHEX
000B                  CALL_GETNUM         equ     $0B     ; $0B GETNUM
000C                  CALL_CMPSTR         equ     $0C     ; $0C CMPSTR
000D                  CALL_CMD_PROC       equ     $0D     ; $0D CMD_PROC
000E                  CALL_TBLSEARCH      equ     $0E     ; $0E TBLSEARCH
000F                  CALL_CPY_DWORD      equ     $0F     ; $0F CPY_DWORD
0010                  CALL_D_TO_RAWA      equ     $10     ; $10 D_TO_RAWA
0011                  CALL_D_TO_RAWB      equ     $11     ; $11 D_TO_RAWB
0012                  CALL_D_TO_RAWR      equ     $12     ; $12 D_TO_RAWR
0013                  CALL_D_TO_INTA      equ     $13     ; $13 D_TO_INTA
0014                  CALL_D_TO_INTB      equ     $14     ; $14 D_TO_INTB
0015                  CALL_D_TO_INTR      equ     $15     ; $15 D_TO_INTR
0016                  CALL_RAWA_TO_D      equ     $16     ; $16 RAWA_TO_D
0017                  CALL_RAWB_TO_D      equ     $17     ; $17 RAWB_TO_D
0018                  CALL_RAWR_TO_D      equ     $18     ; $18 RAWR_TO_D
0019                  CALL_INTA_TO_D      equ     $19     ; $19 INTA_TO_D
001A                  CALL_INTB_TO_D      equ     $1A     ; $1A INTB_TO_D
001B                  CALL_INTR_TO_D      equ     $1B     ; $1B INTR_TO_D
001C                  CALL_8BIT_MATH      equ     $1C     ; $1C 8BIT_MATH
001D                  CALL_DSP_ACA        equ     $1D     ; $1D DSP_ACA
001E                  CALL_DSP_ACB        equ     $1E     ; $1E DSP_ACB
001F                  CALL_DSP_ACR        equ     $1F     ; $1F DSP_ACR
0020                  CALL_DSP_INTA       equ     $20     ; $20 DSP_INTA
0021                  CALL_DSP_INTB       equ     $21     ; $21 DSP_INTB
0022                  CALL_DSP_INTR       equ     $22     ; $22 DSP_INTR
0023                  CALL_WRITE_ACA      equ     $23     ; $23 WRITE_ACA
0024                  CALL_WRITE_ACB      equ     $24     ; $24 WRITE_ACB
0025                  CALL_WRITE_ACR      equ     $25     ; $25 WRITE_ACR
0026                  CALL_ARG_TO_A       equ     $26     ; $26 ARG_TO_A
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
F000                                  org     KERNEL_START
F000  7EF1E0          KRNL_START      jmp     KRNL_BEGIN
                      
                      ; Notes: 
                      ;       fcc     stores raw character string with no default termination
                      ;       fcs     character string with its terminators high bit set
                      ;       fcn     character string with null termination
                      
F003  526574726F2036383039204B65726E656C20524F4D2056302E340A00 KRNL_PROMPT0    fcn     "Retro 6809 Kernel ROM V0.4\n"
F01F  456D756C61746F7220636F6D70696C65642000 KRNL_PROMPT1    fcn     "Emulator compiled "
F032  474E552047656E6572616C205075626C6963204C697363656E7365202847504C205633290A00 KRNL_PROMPT2    fcn     "GNU General Public Liscense (GPL V3)\n"
F058  436F707972696768742028432920323032342D32303235204279204A6179204661726965730A0A00 KRNL_PROMPT3    fcn     "Copyright (C) 2024-2025 By Jay Faries\n\n"  
F080  52656164790A00  READY_PROMPT    fcn     "Ready\n"
                      
                      
                      ; *****************************************************************************
                      ; * MAIN KERNEL COMMAND SUBROUTINES (Prototypes)                              *
                      ; *****************************************************************************
                      ;       do_cls          ; #0            ; Clear Screen (0-255) or ($00-$FF)
                      ;       do_color        ; #1            ; Change Color (0-255) or ($00-$FF)
                      ;       do_load         ; #2            ; Load an Intel Hex Formatted File
                      ;       do_exec         ; #3            ; Execute a Loaded Program
                      ;       do_reset        ; #4            ; Reset the System
                      ;       do_dir          ; #5            ; Display Files and Folders in a Folder
                      ;       do_cd           ; #6            ; Change the Current Directory
                      ;       do_pwd          ; #7            ; Print Working Directory
                      ;       do_chdir        ; #8            ; Alias of CD
                      ;       do_exit         ; #9            ; Exit the Emulator
                      ;       do_quit         ; #10           ; Also Exits the Emulator
                      ;       do_mode         ; #11           ; Display Mode (0-31) or ($00-$1F)
                      ;       do_debug        ; #12           ; Enter or Exit the Debugger
                      ;       do_help         ; #13           ; Display usage help
                      
F087                  KRNL_CMD_TABLE  
F087  636C7300                        fcn     "cls"           ; #0
F08B  636F6C6F7200                    fcn     "color"         ; #1
F091  6C6F616400                      fcn     "load"          ; #2
F096  6578656300                      fcn     "exec"          ; #3
F09B  726573657400                    fcn     "reset"         ; #4
F0A1  64697200                        fcn     "dir"           ; #5
F0A5  636400                          fcn     "cd"            ; #6
F0A8  636864697200                    fcn     "chdir"         ; #7
F0AE  70776400                        fcn     "pwd"           ; #8
F0B2  6578697400                      fcn     "exit"          ; #9
F0B7  7175697400                      fcn     "quit"          ; #10
F0BC  6D6F646500                      fcn     "mode"          ; #11
F0C1  646562756700                    fcn     "debug"         ; #12
F0C7  68656C7000                      fcn     "help"          ; #13
F0CC  FF                              fcb     $FF             ; $FF = end of list
                                      ; ...
                      
F0CD                  KRNL_CMD_VECTS  
F0CD  F2B7                            fdb     do_cls          ; #0
F0CF  F2D3                            fdb     do_color        ; #1
F0D1  F32A                            fdb     do_load         ; #2
F0D3  F365                            fdb     do_exec         ; #3
F0D5  F36A                            fdb     do_reset        ; #4
F0D7  F370                            fdb     do_dir          ; #5
F0D9  F382                            fdb     do_cd           ; #6
F0DB  F382                            fdb     do_chdir        ; #7
F0DD  F38C                            fdb     do_pwd          ; #8
F0DF  F39F                            fdb     do_exit         ; #9
F0E1  F3A0                            fdb     do_quit         ; #10
F0E3  F3A6                            fdb     do_mode         ; #11
F0E5  F3D8                            fdb     do_debug        ; #12
F0E7  F409                            fdb     do_help         ; #13
                                      ; ...
F0E9  4552524F523A20436F6D6D616E64204E6F7420466F756E640A00 KRNL_ERR_NFND   fcn     "ERROR: Command Not Found\n"
F103  2076616C696420636F6D6D616E6473206172653A0A krnl_help_str   fcc     " valid commands are:\n"
F118  2020636C732C202020636F6C6F722C206C6F61642C0A                 fcc     "  cls,   color, load,\n"
F12E  2020657865632C202072657365742C206469722C0A                 fcc     "  exec,  reset, dir,\n"
F143  202063642C2020202063686469722C207077642C0A                 fcc     "  cd,    chdir, pwd,\n"
F158  2020657869742C2020717569742C20206D6F64650A                 fcc     "  exit,  quit,  mode\n"
F16D  202064656275672C20616E642068656C700A00                 fcn     "  debug, and help\n"
                      
                      * krnl_help_str fcc     "cls:   Clear Screen (0-255) or ($00-$FF)\n"
                      *               fcc     "color: Change Color (0-255) or ($00-$FF)\n"
                      *               fcc     "load:  Load an Intel Hex Formatted File\n"
                      *               fcc     "exec:  Execute a Loaded Program\n"
                      *               fcc     "reset: Reset the System\n"
                      *               fcc     "dir:   Display Files and Folders in a Folder\n"
                      *               fcc     "cd:    Change the Current Directory\n"
                      *               fcc     "chdir: Alias of CD\n"
                      *               fcc     "pwd:   Print Working Directory\n"
                      *               fcc     "exit:  Exit the Emulator\n"
                      *               fcc     "quit:  Also Exits the Emulator\n"
                      *               fcc     "mode:  Display Mode (0-31) or ($00-$1F)\n"
                      *               fcc     "debug: Enter or Exit the Debugger\n"
                      *               fcn     "help"  Display usage help\n"
                      
                      
                      ; *****************************************************************************
                      ; * KERNAL ROUTINE SOFTWARE VECTORS                                           *
                      ; *****************************************************************************
F180                  SYSTEM_DATA_START
F180  F499                            fdb     STUB_CLS        ; VECT_CLS      
F182  F4BC                            fdb     STUB_CHROUT     ; VECT_CHROUT   
F184  F4F5                            fdb     STUB_NEWLINE    ; VECT_NEWLINE  
F186  F531                            fdb     STUB_LINEOUT    ; VECT_LINEOUT  
F188  F54F                            fdb     STUB_CSRPOS     ; VECT_CSRPOS   
F18A  F56F                            fdb     STUB_SCROLL     ; VECT_SCROLL   
F18C  F5A5                            fdb     STUB_LINEEDIT   ; VECT_LINEEDIT 
F18E  F62D                            fdb     STUB_GETKEY     ; VECT_GETKEY   
F190  F646                            fdb     STUB_GETHEX     ; VECT_GETHEX   
F192  F66E                            fdb     STUB_GETNUM     ; VECT_GETNUM   
F194  F686                            fdb     STUB_CMPSTR     ; VECT_CMPSTR   
F196  F6BB                            fdb     STUB_CMD_PROC   ; VECT_CMD_PROC 
F198  F717                            fdb     STUB_TBLSEARCH  ; VECT_TBLSEARCH        
F19A  F73B                            fdb     STUB_CPY_DWORD  ; VECT_CPY_DWORD        
F19C  F74F                            fdb     STUB_D_TO_RAWA  ; VECT_D_TO_RAWA        
F19E  F764                            fdb     STUB_D_TO_RAWB  ; VECT_D_TO_RAWB        
F1A0  F779                            fdb     STUB_D_TO_RAWR  ; VECT_D_TO_RAWR        
F1A2  F78E                            fdb     STUB_D_TO_INTA  ; VECT_D_TO_INTA        
F1A4  F7A3                            fdb     STUB_D_TO_INTB  ; VECT_D_TO_INTB        
F1A6  F7B8                            fdb     STUB_D_TO_INTR  ; VECT_D_TO_INTR        
F1A8  F7CD                            fdb     STUB_RAWA_TO_D  ; VECT_RAWA_TO_D        
F1AA  F7DC                            fdb     STUB_RAWB_TO_D  ; VECT_RAWB_TO_D        
F1AC  F7EB                            fdb     STUB_RAWR_TO_D  ; VECT_RAWR_TO_D        
F1AE  F7FA                            fdb     STUB_INTA_TO_D  ; VECT_INTA_TO_D        
F1B0  F809                            fdb     STUB_INTB_TO_D  ; VECT_INTB_TO_D        
F1B2  F818                            fdb     STUB_INTR_TO_D  ; VECT_INTR_TO_D        
F1B4  F827                            fdb     STUB_8BIT_MATH  ; VECT_8BIT_MATH        
F1B6  F853                            fdb     STUB_DSP_ACA    ; VECT_DSP_ACA  
F1B8  F864                            fdb     STUB_DSP_ACB    ; VECT_DSP_ACB  
F1BA  F875                            fdb     STUB_DSP_ACR    ; VECT_DSP_ACR  
F1BC  F893                            fdb     STUB_DSP_INTA   ; VECT_DSP_INTA 
F1BE  F8A4                            fdb     STUB_DSP_INTB   ; VECT_DSP_INTB 
F1C0  F8B5                            fdb     STUB_DSP_INTR   ; VECT_DSP_INTR 
F1C2  F8D8                            fdb     STUB_WRITE_ACA  ; VECT_WRITE_ACA        
F1C4  F8EA                            fdb     STUB_WRITE_ACB  ; VECT_WRITE_ACB        
F1C6  F8FC                            fdb     STUB_WRITE_ACR  ; VECT_WRITE_ACR        
F1C8  F91C                            fdb     STUB_ARG_TO_A   ; VECT_ARG_TO_A 
F1CA                  SYSTEM_DATA_END
                      
                      
                      ; *****************************************************************************
                      ; * DEFAULT VECTORS                                                           *
                      ; *****************************************************************************
F1CA  39              EXEC_start      rts                     ; EXEC program
F1CB  7EF1CB          SWI3_start      jmp     SWI3_start      ; SWI3 Implementation
F1CE  7EF1CE          SWI2_start      jmp     SWI2_start      ; SYS (SWI2) Implementation
F1D1  7EF1D1          FIRQ_start      jmp     FIRQ_start      ; FIRQ Implementation
F1D4  7EF1D4          IRQ_start       jmp     IRQ_start       ; IRQ Implementation
F1D7  7EF1D7          SWI_start       jmp     SWI_start       ; SWI / SYS Implementation
F1DA  7EF1DA          NMI_start       jmp     NMI_start       ; NMI Implementation
F1DD  7EF1DD          RESET_start     jmp     RESET_start     ; RESET Implementation
                      
                      
                      ; *******************************************************************************
                      ; * KRNL_BEGIN                                                                  *
                      ; *     This is the primary entry point for the Kernel Rom.                     *
                      ; *                                                                             *
                      ; * ENTRY REQUIREMENTS: NONE                                                    *
                      ; *                                                                             *
                      ; * EXIT CONDITIONS:    None                                                    *
                      ; * EXIT CONDITIONS:    None                                                    *
                      ; *                                                                             *
                      ; *******************************************************************************
F1E0                  KRNL_BEGIN      ; common start up code
F1E0  FC000E                          ldd     SOFT_RESET      ; load the soft reset vector
F1E3  10830000                        cmpd    #0              ; has it already been initialized?
F1E7  2704                            beq     KRNL_COLD       ; no? Well then, do a cold start
F1E9  6E9F000E                        jmp     [SOFT_RESET]    ; yes? Follow the warm reset vector     
                                      ; ...           
F1ED                  KRNL_COLD       ; cold reset
F1ED  8EFFF0                          ldx     #KRNL_HARD_VECT         ; start of the hardcoded CPU vectors
F1F0  CE0000                          ldu     #SOFT_VECTORS_DEVICE    ; start of the software vectors
F1F3  EC81            1               ldd     ,x++                    ; copy from hardcoded CPU vectors
F1F5  EDC1                            std     ,u++                    ; copy to the software vectors
F1F7  8C0000                          cmpx    #KRNL_HARD_VECT_END     ; at the end yet?
F1FA  2DF7                            blt     1b                      ; nope, keep going
F1FC  CCF22C                          ldd     #KRNL_WARM              ; fetch the warm reboot vector
F1FF  FD000E                          std     SOFT_RESET              ; ... and store it appropriately
                                      ; CPU clock speed       
F202  860F                            lda     #$0f                    ; set the CPU clock speed
F204  B7FE00                          sta     SYS_STATE               ;        to max
                                      ; ...           
                                      ; clear out system memory
F207  8E0010                          ldx     #SYSTEM_MEMORY_DEVICE   ; start of system memory
F20A  CC0000                          ldd     #$0000                  ; clear out D
F20D  BF0400          1               stx     VIDEO_START             ; cycle first character to show progress
F210  ED81                            std     ,x++                    ; clear out the next word of system memory
F212  8CB000                          cmpx    #USER_RAM_TOP           ; at the end yet?
F215  26F6                            bne     1b                      ; nope, keep going
                                      ; initialize the system 
F217  8EF180                          ldx     #SYSTEM_DATA_START
F21A  108E0010                        ldy     #$0010
F21E  A680            1               lda     ,x+
F220  A7A0                            sta     ,y+
F222  8CF1CA                          cmpx    #SYSTEM_DATA_END
F225  2DF7                            blt     1b
                                      ; CPU clock speed
F227  860A                            lda     #$0a            ; set the default CPU clock speed
F229  B7FE00                          sta     SYS_STATE       ;    to 900 Khz.
                      
                                      ; ...           
F22C                  KRNL_WARM       ; warm reboot
F22C  10CE0400                        lds     #SSTACK_TOP     ; give the stack a home
F230  864B                            lda     #$4B            ; $4B = green on dk.green
F232  B7005C                          sta     _ATTRIB         ; set the default text color attribute
                                      ; ...           
                                      ; set up the initial display
F235                                  sys     CALL_CLS        ; Clear the Text Screen
F235  103F                                swi2
F237  01                                  fcb \1
F238  8EF003                          ldx     #KRNL_PROMPT0   ; Point X to the Kernel Version Text
F23B                                  sys     CALL_LINEOUT    ; Display the Text
F23B  103F                                swi2
F23D  05                                  fcb \1
F23E  8EF01F                          ldx     #KRNL_PROMPT1   ; Point X to the Compilation Text
F241                                  sys     CALL_LINEOUT    ; Display the Text
F241  103F                                swi2
F243  05                                  fcb \1
F244  8602                            lda     #FC_COMPDATE    ; command to fetch the compilation date
F246  B7FE59                          sta     FIO_COMMAND     ; issue the command to the FileIO device
F249  B6FE62          1               lda     FIO_PATH_DATA   ; load a character from the response data
F24C  2705                            beq     2f              ; if we've received a NULL, stop looping
F24E                                  sys     CALL_CHROUT     ; output the retrieved character to the console
F24E  103F                                swi2
F250  02                                  fcb \1
F251  20F6                            bra     1b              ; continue looping while there is still data
F253  860A            2               lda     #$0a            ; line feed character
F255                                  sys     CALL_CHROUT     ; send the line feed to the console                
F255  103F                                swi2
F257  02                                  fcb \1
F258  8EF032                          ldx     #KRNL_PROMPT2   ; point to the third prompt line
F25B                                  sys     CALL_LINEOUT    ; output it to the console
F25B  103F                                swi2
F25D  05                                  fcb \1
F25E  8EF058                          ldx     #KRNL_PROMPT3   ; point to the fourth prompt line
F261                                  sys     CALL_LINEOUT    ; output it to the console
F261  103F                                swi2
F263  05                                  fcb \1
                                      ; ...           
                                      ; enable the mouse cursor
F264  B6FE28                          lda     CSR_FLAGS       ; load the mouse cursor flags
F267  8A08                            ora     #%1000'0000     ; set the enable bit
F269  B7FE28                          sta     CSR_FLAGS       ; update the cursor flags
                                  
                      ; *****************************************************************************
                      ; * THE MAIN COMMAND LOOP                                                     *
                      ; *****************************************************************************
                      ; *                                                                           *
                      ; *     1) Displays the "Ready" prompt                                        *
                      ; *     2) Runs the Command Input Line Editor                                 *
                      ; *     3) Dispatches the Operating System Commands                           *
                      ; *                                                                           *
                      ; *****************************************************************************
F26C  F6005C          KRNL_MAIN_LOOP  ldb     _ATTRIB         ; fetch the current color attribute
F26F  8EF080                          ldx     #READY_PROMPT   ; the ready prompt
F272                                  sys     CALL_LINEOUT    ; output to the console
F272  103F                                swi2
F274  05                                  fcb \1
                      
F275  867F                            lda     #$7F            ; Initialize the line editor
F277  B7FE43                          sta     EDT_BFR_LEN     ; allow for the full sized buffer
F27A  7FFE41                          clr     EDT_BFR_CSR     ; set the buffer cursor to the start
F27D  7F0100                          clr     EDT_BUFFER                      
                      
F280  8E0100                          ldx     #EDT_BUFFER     ; point to the edit buffer
F283  6F80            k_main_clr      clr     ,x+             ; clear an entry and advance to next
F285  8C017F                          cmpx    #KEY_END        ; are we at the end of the buffer?
F288  2DF9                            blt     k_main_clr      ;   not yet, continue looping
                      
F28A  BDF5A1          k_main_0        jsr     KRNL_LINEEDIT   ; run the command line editor
F28D  BDF6B7                          jsr     KRNL_CMD_PROC   ;    decode the command; A = Table Index
F290  7D0100                          tst     EDT_BUFFER      ; test the buffer for a null
F293  270D                            beq     k_main_cont     ; skip, nothing was entered
F295  81FF                            cmpa    #$FF            ; ERROR: command not found 
F297  2710                            beq     k_main_error    ;    display the error
F299  48                              lsla                    ; index two byte addresses
F29A  3001                            leax    1,x
F29C  108EF0CD                        ldy     #KRNL_CMD_VECTS ; the start of the command vector table
F2A0  ADB6                            jsr     [a,y]           ; call the command subroutine
F2A2  7D0100          k_main_cont     tst     EDT_BUFFER      ; nothing entered in the command line?
F2A5  27E3                            beq     k_main_0        ;   nope, skip the ready prompt
F2A7  20C3                            bra     KRNL_MAIN_LOOP  ; back to the top of the main loop
F2A9  8EF0E9          k_main_error    ldx     #KRNL_ERR_NFND  ; ERROR: Command Not Found
F2AC  BDF52D                          jsr     KRNL_LINEOUT    ; send it to the console
F2AF  20F1                            bra     k_main_cont     ; continue within the main loop
                                      ; ...
F2B1                                  sys     CALL_GARBAGE
F2B1  103F                                swi2
F2B3  00                                  fcb \1
                                      ; infinite loop (for now)
F2B4  7EF2B4          KRNL_INF        jmp     KRNL_INF                        
                      
                      
                      
                      ; *****************************************************************************
                      ; * Command: CLS "Clear Screen"                       ARG1 = Color Attribute  *
                      ; *****************************************************************************
F2B7  6D84            do_cls          tst     ,x              ; test for an argument
F2B9  270F                            beq     do_cls_0        ; no argument, just go clear the screen
F2BB  A684                            lda     ,x              ; first character in the argument
F2BD  81FF                            cmpa    #$ff            ; $FF is also a terminator
F2BF  2709                            beq     do_cls_0        ; no argument, go clear the screen
F2C1  BDF918                          jsr     KRNL_ARG_TO_A   ; fetch the numeric argument into A
F2C4  4D                              tsta                    ; is the numeric value 0?
F2C5  2703                            beq     do_cls_0        ; yeah, go clear the screen
F2C7  B7005C                          sta     _ATTRIB         ; store the argument as the default color
F2CA  8620            do_cls_0        lda     #' '            ; load the SPACE character to clear with
F2CC  F6005C                          ldb     _ATTRIB         ; load the color attribute
F2CF  BDF495                          jsr     KRNL_CLS        ; clear the screen
F2D2  39                              rts                     ; return from subroutine
                      
                      
                      ; *****************************************************************************
                      ; * Command: COLOR "Change the Color Attribute"       ARG1 = Color Attribute  *
                      ; *****************************************************************************
F2D3  6D84            do_color        tst     ,x              ; test for an argument
F2D5  270D                            beq     do_color_0      ; if its zero, do nothing; just return
F2D7  BDF918                          jsr     KRNL_ARG_TO_A   ; fetch the numeric argument into A
F2DA  4D                              tsta                    ; is it a zero?
F2DB  2707                            beq     do_color_0      ;   yeah, return
F2DD  81FF                            cmpa    #$ff            ; is it the other terminator?
F2DF  2703                            beq     do_color_0      ;   yeah, return
F2E1  B7005C                          sta     _ATTRIB         ; save the new default color attribute
F2E4  39              do_color_0      rts                     ; return from subroutine
                      
                      
                      ; *****************************************************************************
                      ; * Command: LOAD "Load a (Intel) Hex File        ARG1 = {filepath}/filename  *
                      ; *****************************************************************************
F2E5  4552524F523A2046696C65204E6F7420466F756E640A00 err_file_nf     fcn     "ERROR: File Not Found\n";
F2FC  4552524F523A2046696C65204E6F74204F70656E0A00 err_file_no     fcn     "ERROR: File Not Open\n";
F312  4552524F523A2057726F6E672046696C6520547970650A00 err_wrong_file  fcn     "ERROR: Wrong File Type\n"
F32A  BDF35A          do_load         jsr     do_arg1_helper  ; fetch path data from argument 1
F32D  860A                            lda     #FC_LOADHEX     ; FIO Command
F32F  B7FE59                          sta     FIO_COMMAND     ; Send the Load Hex Command
F332  B6FE58                          lda     FIO_ERROR       ; Examine the Error Code
F335  8101                            cmpa    #FE_NOTFOUND    ; is the File Not Found bit set?
F337  271A                            beq     do_ld_notfound  ; ERROR: File Not Found
F339  8102                            cmpa    #FE_NOTOPEN     ; is the File Not Open bit set?
F33B  270E                            beq     do_ld_notopen   ; ERROR: File Not Open
F33D  8105                            cmpa    #FE_WRONGTYPE   ; is the Wrong File Type bit set?
F33F  2702                            beq     do_ld_wrong     ; ERROR: Wrong File Type
F341  2016                            bra     do_ld_done      ; All done, return
F343  8EF312          do_ld_wrong     ldx     #err_wrong_file ; point to the error message
F346  BDF52D                          jsr     KRNL_LINEOUT    ; send the text to the console
F349  200E                            bra     do_ld_done      ; done, return
F34B  8EF2FC          do_ld_notopen   ldx     #err_file_no    ; point to the error message
F34E  BDF52D                          jsr     KRNL_LINEOUT    ; send it to the console
F351  2006                            bra     do_ld_done      ; done, return
F353  8EF2E5          do_ld_notfound  ldx     #err_file_nf    ; point to the error message
F356  BDF52D                          jsr     KRNL_LINEOUT    ; send it to the console
F359  39              do_ld_done      rts                     ; done, return
F35A  7FFE61          do_arg1_helper  clr     FIO_PATH_POS    ; reset the path cursor position
F35D  A680            do_argh_0       lda     ,x+             ; load the next character
F35F  B7FE62                          sta     FIO_PATH_DATA   ; push it into the FIO Path Data Port
F362  26F9                            bne     do_argh_0       ; Continue until Null-Terminator
F364  39                              rts                     ; return from subroutine
                      
                      ; *****************************************************************************
                      ; * Command: EXEC "Execute a Program"                            ARG1 = none  *
                      ; *****************************************************************************
F365  AD9F0000        do_exec         jsr     [VEC_EXEC]      ; call the users program
F369  39                              rts                     ; return from this subroutine
                      
                      ; *****************************************************************************
                      ; * Command: RESET "Perform a System Reset"                      ARG1 = none  *
                      ; *****************************************************************************
F36A  8600            do_reset        lda     #FC_RESET       ; load the FIO Command: RESET
F36C  B7FE59                          sta     FIO_COMMAND     ; issue the Command
F36F  39                              rts                     ; return from subroutine
                      
                      ; *****************************************************************************
                      ; * Command: DIR "List a Directorys Files and Folders"     ARG1 = {filepath}  *
                      ; *****************************************************************************
F370  8DE8            do_dir          bsr     do_arg1_helper  ; fetch path data from argument 1
F372  860C                            lda     #FC_LISTDIR     ; load the FIO command: LISTDIR
F374  B7FE59                          sta     FIO_COMMAND     ; issue the Command
F377  B6FE66          do_dir_1        lda     FIO_DIR_DATA    ; load a character from the Data Port
F37A  2705                            beq     do_dir_2        ; quit when we find the Null-Terminator
F37C  BDF4B8                          jsr     KRNL_CHROUT     ; output the character to the console
F37F  20F6                            bra     do_dir_1        ; continue looping until done
F381  39              do_dir_2        rts                     ; return from subroutine
                      
                      ; *****************************************************************************
                      ; * Command: CD / CHDIR "Change Current Folder"            ARG1 = {filepath}  *
                      ; *****************************************************************************
F382                  do_cd                                   ; CD is an alias for CHDIR
F382  8DD6            do_chdir        bsr     do_arg1_helper  ; fetch path data from argument 1
F384  860E                            lda     #FC_CHANGEDIR   ; load the FIO command: CHANGEDIR
F386  B7FE59                          sta     FIO_COMMAND     ; send it; change dir
F389  7EF38C                          jmp     do_pwd          ; output the current working directory
                      
                      ; *****************************************************************************
                      ; * Command: PWD "Print Working Directory"                       ARG1 = none  *
                      ; *****************************************************************************
F38C  860F            do_pwd          lda     #FC_GETPATH     ; load the FIO command: GETPATH 
F38E  B7FE59                          sta     FIO_COMMAND     ; send it; fetch the current path
F391  7FFE61                          clr     FIO_PATH_POS    ; reset the path cursor position
F394  B6FE62          do_pwd_0        lda     FIO_PATH_DATA   ; pull a character from the path data port
F397  2705                            beq     do_pwd_1        ; if it's a null, we're done
F399  BDF4B8                          jsr     KRNL_CHROUT     ; output the character to the console
F39C  20F6                            bra     do_pwd_0        ; continue looping until done
F39E  39              do_pwd_1        rts                     ; return from subroutine
                      
                      ; *****************************************************************************
                      ; * Command: EXIT / QUIT "Terminate the Emulator Program"        ARG1 = none  *
                      ; *****************************************************************************
F39F  12              do_exit         nop                     ; EXIT is an alias for QUIT
F3A0  8601            do_quit         lda     #FC_SHUTDOWN    ; load the FIO command: SHUTDOWN
F3A2  B7FE59                          sta     FIO_COMMAND     ; issue the shutdown command
F3A5  39                              rts                     ; return from subroutine
                      
                      ; *****************************************************************************
                      ; * Command: MODE "Change Display Mode" (sets GMODE)    ARG1 = Graphics Mode  *
                      ; *****************************************************************************
F3A6  6D84            do_mode         tst     ,x              ; test for an argument
F3A8  2718                            beq     do_mode_0       ; just return if argument == zero
F3AA  BDF918                          jsr     KRNL_ARG_TO_A   ; fetch the numeric argument into A 
F3AD  8407                            anda    #%00000111      ; mask out the mode bits
F3AF  B70062                          sta     _LOCAL_3        ; store the mode bits
F3B2  B6FE0C                          lda     GPU_MODE_LSB    ; fetch the current mode lsb
F3B5  84F8                            anda    #%11111000      ; mask out the mode bits
F3B7  BA0062                          ora     _LOCAL_3        ; or them back in
F3BA  B7FE0C                          sta     GPU_MODE_LSB    ; set the GMODE 
F3BD  8620                            lda     #' '            ; load a SPACE character
F3BF  BDF495                          jsr     KRNL_CLS        ; clear the screen
F3C2  39              do_mode_0       rts                     ; return from subroutine
                      
                      ; *****************************************************************************
                      ; * Command: DEBUG "Enter / Exit Debugger"                       ARG1 = none  *
                      ; *****************************************************************************
F3C3  2000            do_debug_str    fcn     " ";
F3C5  656E61626C65640A00 do_debug_ena    fcn     "enabled\n";
F3CE  64697361626C65640A00 do_debug_dis    fcn     "disabled\n";
F3D8  B6FE0A          do_debug        lda     SYS_DBG_FLAGS   ; load the debug hardware flags
F3DB  8480                            anda    #$80            ; test the enable bit
F3DD  2715                            beq     do_debug_0      ; Go ENABLE the debugger
                                      ; DISABLE the debugger
F3DF  B6FE0A                          lda     SYS_DBG_FLAGS   ; load the debug hardware flags
F3E2  847F                            anda    #$7f            ; mask out the debugger bit
F3E4  B7FE0A                          sta     SYS_DBG_FLAGS   ; store the updated debug flags
F3E7  8EF3C3                          ldx     #do_debug_str   ; load the debugger response string
F3EA  BDF52D                          jsr     KRNL_LINEOUT    ; send the string to the console
F3ED  8EF3CE                          ldx     #do_debug_dis   ; load the "disabled" string address
F3F0  BDF52D                          jsr     KRNL_LINEOUT    ; send it to the console
F3F3  39                              rts                     ; return from this subroutine
F3F4                  do_debug_0      ; ENABLE the debugger
F3F4  B6FE0A                          lda     SYS_DBG_FLAGS   ; load the debug hardware flags
F3F7  8A80                            ora     #$80            ; set the debug enable flag
F3F9  B7FE0A                          sta     SYS_DBG_FLAGS   ; store the updated debug flags
F3FC  8EF3C3                          ldx     #do_debug_str   ; load the debugger response string
F3FF  BDF52D                          jsr     KRNL_LINEOUT    ; send it to the console
F402  8EF3C5                          ldx     #do_debug_ena   ; load the "enabled" string start
F405  BDF52D                          jsr     KRNL_LINEOUT    ; send it to the console
F408  39                              rts                     ; return from this subroutine
                      
                      ; *****************************************************************************
                      ; * Command: HELP basic help text message                        ARG1 = none  *
                      ; *****************************************************************************
F409  8EF103          do_help         ldx     #krnl_help_str  ; load the help message string addresses
F40C  BDF52D                          jsr     KRNL_LINEOUT    ; send it to the console
F40F  39                              rts                     ; return from subroutine
                      
                      
                      ; *******************************************************************************
                      ; * System Call Handler:                                                        *
                      ; *                                                                             *
                      ; *     References the byte immediately following the SWI2 instruction and      *
                      ; *     dispatches to the appropriate system call based on that value.          *
                      ; *                                                                             *
                      ; * ENTRY REQUIREMENTS: Varies                                                  *
                      ; *                                                                             *
                      ; * EXIT CONDITIONS:    Varies                                                  *
                      ; *                                                                             *
                      ; * Notes: (See Kernel_Header.asm)                                              *
                      ; *     Common Stack Offsets:                                                   *
                      ; *         CC  =  0,S                                                          *
                      ; *         D   =  1,S                                                          *
                      ; *         A   =  1,S                                                          *
                      ; *         B   =  2,S                                                          *
                      ; *         DP  =  3,S                                                          *
                      ; *         X   =  4,S                                                          *
                      ; *         Y   =  6,S                                                          *
                      ; *         U   =  8,S                                                          *
                      ; *         PC  = 10,S                                                          *
                      ; *                                                                             *
                      ; *******************************************************************************
F410  F478            KRNL_SYS_CALLS  fdb     SYS_GARBAGE     ; $00 random garbage
F412  F491                            fdb     SYS_CLS         ; $01 CLS               
F414  F4B2                            fdb     SYS_CHROUT      ; $02 CHROUT            
F416  F4ED                            fdb     SYS_NEWLINE     ; $03 NEWLINE           
F418  F50D                            fdb     SYS_TAB         ; $04 TAB               
F41A  F527                            fdb     SYS_LINEOUT     ; $05 LINEOUT           
F41C  F545                            fdb     SYS_CSRPOS      ; $06 CSRPOS            
F41E  F567                            fdb     SYS_SCROLL      ; $07 SCROLL            
F420  F59D                            fdb     SYS_LINEEDIT    ; $08 LINEEDIT          
F422  F625                            fdb     SYS_GETKEY      ; $09 GETKEY            
F424  F63E                            fdb     SYS_GETHEX      ; $0A GETHEX            
F426  F666                            fdb     SYS_GETNUM      ; $0B GETNUM            
F428  F67E                            fdb     SYS_CMPSTR      ; $0C CMPSTR            
F42A  F6B3                            fdb     SYS_CMD_PROC    ; $0D CMD_PROC          
F42C  F710                            fdb     SYS_TBLSEARCH   ; $0E TBLSEARCH         
F42E  F733                            fdb     SYS_CPY_DWORD   ; $0F CPY_DWORD         
F430  F747                            fdb     SYS_D_TO_RAWA   ; $10 SYS_D_TO_RAWA
F432  F75C                            fdb     SYS_D_TO_RAWB   ; $11 SYS_D_TO_RAWB
F434  F771                            fdb     SYS_D_TO_RAWR   ; $12 SYS_D_TO_RAWR
F436  F786                            fdb     SYS_D_TO_INTA   ; $13 SYS_D_TO_INTA
F438  F79B                            fdb     SYS_D_TO_INTB   ; $14 SYS_D_TO_INTB
F43A  F7B0                            fdb     SYS_D_TO_INTR   ; $15 SYS_D_TO_INTR
F43C  F7C5                            fdb     SYS_RAWA_TO_D   ; $16 SYS_RAWA_TO_D
F43E  F7D4                            fdb     SYS_RAWB_TO_D   ; $17 SYS_RAWB_TO_D
F440  F7E3                            fdb     SYS_RAWR_TO_D   ; $18 SYS_RAWR_TO_D
F442  F7F2                            fdb     SYS_INTA_TO_D   ; $19 SYS_INTA_TO_D
F444  F801                            fdb     SYS_INTB_TO_D   ; $1A SYS_INTB_TO_D
F446  F810                            fdb     SYS_INTR_TO_D   ; $1B SYS_INTR_TO_D
F448  F81F                            fdb     SYS_8BIT_MATH   ; $1C SYS_8BIT_MATH
F44A  F84B                            fdb     SYS_DSP_ACA     ; $1D SYS_DSP_ACA
F44C  F85C                            fdb     SYS_DSP_ACB     ; $1E SYS_DSP_ACB
F44E  F86D                            fdb     SYS_DSP_ACR     ; $1F SYS_DSP_ACR
F450  F88B                            fdb     SYS_DSP_INTA    ; $20 SYS_DSP_INTA
F452  F89C                            fdb     SYS_DSP_INTB    ; $21 SYS_DSP_INTB
F454  F8AD                            fdb     SYS_DSP_INTR    ; $22 SYS_DSP_INTR
F456  F8D0                            fdb     SYS_WRITE_ACA   ; $23 SYS_WRITE_ACA
F458  F8E2                            fdb     SYS_WRITE_ACB   ; $24 SYS_WRITE_ACB
F45A  F8F4                            fdb     SYS_WRITE_ACR   ; $25 SYS_WRITE_ACR
F45C  F914                            fdb     SYS_ARG_TO_A    ; $26 SYS_ARG_TO_A
F45E                  KRNL_SYS_CALLS_END                              
                                      
                      
F45E                  SYS_Handler     ; increment the return address on the stack past the command byte
F45E  EE6A                            ldu     $000a,S         ; fetch the command that follows the SWI2
F460  E6C4                            ldb     0,U             ; load the command into B
F462  3341                            leau    1,U             ; address just past the command byte
F464  EF6A                            stu     $000a,S         ; update the return address in the stack
F466  CEF410                          ldu     #KRNL_SYS_CALLS ; system call vector base address
F469  58                              lslb                    ; each address is two bytes long
F46A  33C5                            leau    B,U             ; U = system call vector effective address
F46C  1183F45E                        cmpu    #KRNL_SYS_CALLS_END ; Bounds check
F470  2C02                            bge     SYS_HNDLR_DONE  ; system call out of bounds; error
F472  6ED4                            jmp     [,U]            ; take the appropriate system call vector
F474                  SYS_HNDLR_DONE  ; Error Condition -- System Call Out of Bounds
                                      ; ...  (ToDo)
F474  7EF47C                          jmp     KRNL_GARBAGE    ; temporary fatal error
                                      ; ...
F477  3B                              rti ; Reminder: This Sub is an Interrupt
                      
                      
                      ; This is just a temporary place holder for a terminal system crash.
                      ; cycle video memory (infinite loop)
F478  BDF47C          SYS_GARBAGE     jsr     KRNL_GARBAGE    ; call the kernel error handler (temp)
F47B  3B                              rti                     ; return from the sys interrupt
F47C                  KRNL_GARBAGE                    
F47C  CC0100                          ldd     #$0100          ; initialize a starting attribute/character pair
F47F  8E0400          1               ldx     #VIDEO_START    ; point to the start of the text display
F482  C30001                          addd    #1              ; increment the attribute/character to display
F485  ED81            2               std     ,x++            ; store the colored character to the next cell
F487  C30001                          addd    #1              ; increment the attribute/character to display
F48A  BCFE0D                          cmpx    GPU_VIDEO_MAX   ; at the end of displayed video memory?
F48D  2DF6                            blt     2b              ; nope, keep going with the next character
F48F  20EE                            bra     1b              ; yup, start over.
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_CLS                                                                  *
                      ; *     Clears the currently displayed screen buffer                          *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: Screen will be cleared with spaces with the color     *
                      ; *     stored in _ATTRIB.                                                    *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    All registers preserved                               *
                      ; *****************************************************************************
F491  BDF495          SYS_CLS         jsr     KRNL_CLS        ; call the kernel Clear Screen handler
F494  3B                              rti                     ; return from the sys interrupt
                                      ; ...
F495  6E9F0010        KRNL_CLS        jmp     [VEC_CLS]       ; proceed through the software vector
F499  3416            STUB_CLS        pshs    d,x             ; save the used registers onto the stack
F49B  B6005C                          lda     _ATTRIB         ; fetch the current color attribute
F49E  C620                            ldb     #' '            ; the space character
F4A0  8E0400                          ldx     #VIDEO_START    ; index the start of the video buffer
F4A3  ED81            1               std     ,x++            ; store a character to the buffer
F4A5  BCFE0D                          cmpx    GPU_VIDEO_MAX   ; are we at the end yet?
F4A8  2DF9                            blt     1b              ; nope, keep storing characters
F4AA  7F005A                          clr     _CURSOR_COL     ; clear the current cursor position ...
F4AD  7F005B                          clr     _CURSOR_ROW     ; ... column and row the home (top/left)
F4B0  3596                            puls    d,x,pc          ; cleanup and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_CHROUT                                                               *
                      ; *     Outputs a character to the console at the current cursor              *
                      ; *     position. This routine should update the cursors postion              *
                      ; *     and handle text scrolling as needed.                                  *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: A = Character to be displayed                         *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    All registers preserved                               *
                      ; *****************************************************************************
F4B2  A661            SYS_CHROUT      lda     1,S             ; fetch A from the stack
F4B4  BDF4B8                          jsr     KRNL_CHROUT     ; call the character out kernel handler
F4B7  3B                              rti                     ; return from the sys interrupt
                                      ; ...
F4B8  6E9F0012        KRNL_CHROUT     jmp     [VEC_CHROUT]    ; proceed through the software vector
F4BC  3417            STUB_CHROUT     pshs    d,x,cc          ; save the used registers onto the stack
F4BE  1F89                            tfr     a,b
F4C0  B6005C                          lda     _ATTRIB         ; load the current color attribute
F4C3  5D              K_CHROUT_1      tstb                    ; is A a null?
F4C4  2725                            beq     K_CHROUT_DONE   ;    A is null, just return and do nothing              
F4C6  C10A                            cmpb    #$0A            ; is it a newline character?
F4C8  2605                            bne     K_CHROUT_2      ; nope, don't do a newline
F4CA  BDF4F1                          jsr     KRNL_NEWLINE    ; advance the cursor 
F4CD  201C                            bra     K_CHROUT_DONE   ; clean up and return
F4CF  C109            K_CHROUT_2      cmpb    #$09            ; is it a tab character?
F4D1  2605                            bne     K_CHROUT_0      ; nope, don't do a tab
F4D3  BDF511                          jsr     KRNL_TAB        ; tab the character position
F4D6  2013                            bra     K_CHROUT_DONE   ; clean up and return
F4D8  BDF54B          K_CHROUT_0      jsr     KRNL_CSRPOS     ; position X at the cursor position
F4DB  ED84                            std     ,x              ; display the character/attribute combo
F4DD  7C005A                          inc     _CURSOR_COL     ; increment current cursor column position
F4E0  B6005A                          lda     _CURSOR_COL     ; load current cursor column position                                   
F4E3  B1FE13                          cmpa    GPU_TCOLS       ; compare with the current screen columns
F4E6  2D03                            blt     K_CHROUT_DONE   ; if the csr column is okay, we're done
F4E8  BDF4F1                          jsr     KRNL_NEWLINE    ; perform a new line
F4EB  3597            K_CHROUT_DONE   puls    d,x,cc,pc       ; cleanup and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_NEWLINE                                                              *
                      ; *     Perfoms a CR/LF ($0A) on the console. Advances the current            *
                      ; *     cursor position and scrolls the console if needed.                    *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: NONE                                                  *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    All registers preserved.                              *
                      ; *****************************************************************************
F4ED  BDF4F1          SYS_NEWLINE     jsr     KRNL_NEWLINE    ; call the newline kernel handler
F4F0  3B                              rti                     ; return from the sys interrupt
                                      ; ...
F4F1  6E9F0014        KRNL_NEWLINE    jmp     [VEC_NEWLINE]   ; proceed through the software vector
F4F5  3416            STUB_NEWLINE    pshs    D,X             ; save the used registers onto the stack
F4F7  7F005A                          clr     _CURSOR_COL     ; carrage return (move to left edge)
F4FA  7C005B                          inc     _CURSOR_ROW     ; increment the cursors row
F4FD  B6005B                          lda     _CURSOR_ROW     ; load the current row
F500  B1FE14                          cmpa    GPU_TROWS       ; compared to the current screen rows
F503  2D06                            blt     K_NEWLINE_DONE  ; clean up and return if less than
F505  7A005B                          dec     _CURSOR_ROW     ; move the cursor the the bottom row
F508  BDF56B                          jsr     KRNL_SCROLL     ; scroll the text screen up one line
F50B  3596            K_NEWLINE_DONE  puls    D,X,PC          ; restore the saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_TAB                                                                  *
                      ; *     Perfoms a tab ($0A) on the console. Advances the current              *
                      ; *     cursor position and scrolls the console if needed.                    *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: NONE                                                  *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    All registers preserved.                              *
                      ; *****************************************************************************
F50D  BDF511          SYS_TAB         jsr     KRNL_TAB        ; call the tab character kernel handler
F510  3B                              rti                     ; return from the sys interrupt
                                      ; ...
F511  3404            KRNL_TAB        pshs    b               ; save B
F513  F6005A                          ldb     _CURSOR_COL     ; Fetch the current cursor col
F516  CB04                            addb    #4              ; Move cursor by 4 spaces
F518  C4FC                            andb    #%11111100      ; Align to the next tab stop
F51A  F7005A                          stb     _CURSOR_COL     ; update the cursor column
F51D  F1FE13                          cmpb    GPU_TCOLS       ; Ensure column is within bounds
F520  2D03                            blt     K_TAB_DONE      ; Within bounds, we're done
F522  BDF4F1                          jsr     KRNL_NEWLINE    ; Handle line wrapping
F525  3584            K_TAB_DONE      puls    B,PC            ; cleanup and return
                      
                      
                      ; *******************************************************************************
                      ; * KRNL_LINEOUT                                                                *
                      ; *     Outputs a string to the console                                         *
                      ; *                                                                             *
                      ; * ENTRY REQUIREMENTS: X = String starting address                             *
                      ; *                         (null terminated)                                   *
                      ; *                                                                             *
                      ; * EXIT CONDITIONS:    All registers preserved.                                *
                      ; *******************************************************************************
F527  AE64            SYS_LINEOUT     ldx     4,S             ; fetch X from the stack
F529  BDF52D                          jsr     KRNL_LINEOUT    ; call the line out kernel handler
F52C  3B                              rti                     ; return from the sys interrupt
                                      ; ...
F52D  6E9F0016        KRNL_LINEOUT    jmp     [VEC_LINEOUT]   ; proceed through the software vector
F531  3456            STUB_LINEOUT    pshs    D,X,U           ; save the used registers onto the stack
F533  1F13                            tfr     X,U             ; move X to U
F535  BDF54B                          jsr     KRNL_CSRPOS     ; set X to the cursor position 
F538  A6C0            K_LINEOUT_0     lda     ,U+             ; fetch the next character
F53A  2707                            beq     K_LINEOUT_DONE  ; cleanup and return if null-terminator         
F53C  BDF4B8                          jsr     KRNL_CHROUT     ; send the character to the console
F53F  3001                            leax    1,X             ; point to the next character
F541  20F5                            bra     K_LINEOUT_0     ; continue looping until done
F543  35D6            K_LINEOUT_DONE  puls    D,U,X,PC        ; restore the saved registers and return
                      
                      
                      ; *******************************************************************************
                      ; * KRNL_CSRPOS                                                                 *
                      ; *     Loads into X the cursor position                                        *
                      ; *                                                                             *
                      ; * ENTRY REQUIREMENTS:                                                         *
                      ; *     _CURSOR_COL     =   (Byte) Current Text Cursor Column Position          *
                      ; *     _CURSOR_ROW     =   (Byte) Current Text Cursor Row Position             *
                      ; *                                                                             *
                      ; * EXIT CONDITIONS:    X = The address within the text                         *
                      ; *                         where the cursor is positioned.                     *   
                      ; *                     All other registers preserved.                          *
                      ; *******************************************************************************
F545  BDF54B          SYS_CSRPOS      jsr     KRNL_CSRPOS     ; call the CSRPOS kernel subroutine
F548  AF64                            stx     4,S             ; replace X in the stack so it has ...
F54A  3B                              rti                     ; ... valid info on return
                                      ; ...
F54B  6E9F0018        KRNL_CSRPOS     jmp     [VEC_CSRPOS]    ; proceed through the software vector
F54F  3406            STUB_CSRPOS     pshs    D               ; save the used registers onto the stack
F551  B6005B                          lda     _CURSOR_ROW     ; current cursor row
F554  F6FE13                          ldb     GPU_TCOLS       ; current text columns
F557  58                              lslb                    ; times two (account for the attribute)
F558  3D                              mul                     ; row * columns
F559  8E0400                          ldx     #VIDEO_START    ; the buffer starting address
F55C  308B                            leax    D,X             ; add the video base address
F55E  F6005A                          ldb     _CURSOR_COL     ; load the current cursor column
F561  58                              lslb                    ; times two (account for the attribute)
F562  4F                              clra                    ; don't let B become negative, use D
F563  308B                            leax    D,X             ; add the column to the return address
F565  3586                            puls    D,PC            ; restore the saved registers and return
                      
                      ; *****************************************************************************
                      ; * KRNL_SCROLL                                                               *
                      ; *     Scroll the text screen up one line and blank the bottom line.         *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: NONE                                                  *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    All registers preserved.                              *
                      ; *****************************************************************************
F567  BDF56B          SYS_SCROLL      jsr     KRNL_SCROLL     ; call the text screen scroll handler
F56A  3B                              rti                     ; return from the sys interrupt
                                      ; ...
F56B  6E9F001A        KRNL_SCROLL     jmp     [VEC_SCROLL]    ; proceed through the software vector
F56F  3456            STUB_SCROLL     pshs    d,x,u           ; save the used registers onto the stack
F571  8E0400                          ldx     #VIDEO_START    ; set X to the start of the video buffer
F574  1F13                            tfr     x,u             ; copy X into U
F576  F6FE13                          ldb     GPU_TCOLS       ; B = Screen Columns
F579  58                              lslb                    ; account for the attribute byte
F57A  4F                              clra                    ; MSB of D needs to not be negative
F57B  33CB                            leau    d,u             ; U is now one line below X
F57D  ECC1            K_SCROLL_0      ldd     ,u++            ; load a character from where U points
F57F  ED81                            std     ,x++            ; store it to where X points
F581  11B3FE0D                        cmpu    GPU_VIDEO_MAX   ; has U exceeded the screen buffer
F585  2DF6                            blt     K_SCROLL_0      ; continue looping of not
F587  B6005C                          lda     _ATTRIB
F58A  C620                            ldb     #' '            ; set SPACE as the current character
F58C  ED81            K_SCROLL_1      std     ,x++            ; and store it to where X points
F58E  BCFE0D                          cmpx    GPU_VIDEO_MAX   ; continue looping until the bottom ...
F591  2DF9                            blt     K_SCROLL_1      ; ... line has been cleared
F593  7DFE42                          tst     EDT_ENABLE      ; are we using the line editor?
F596  2703                            beq     K_SCROLL_DONE   ; nope, just clean up and return
F598  7A005E                          dec     _ANCHOR_ROW     ; yup, decrease the anchor row by one
F59B  35D6            K_SCROLL_DONE   puls    d,x,u,pc        ; restore the registers and return
                      
                      ; *****************************************************************************
                      ; * KRNL_LINEEDIT                                                             *
                      ; *     Engage the text line editor,                                          *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: NONE                                                  *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    All registers preserved.                              *
                      ; *****************************************************************************
F59D  BDF5A1          SYS_LINEEDIT    jsr     KRNL_LINEEDIT   ; call the text line edit kernel handler
F5A0  3B                              rti                     ; return from the interrupt
                                      ; ...
F5A1  6E9F001C        KRNL_LINEEDIT   jmp     [VEC_LINEEDIT]  ; proceed through the software vector
F5A5  3457            STUB_LINEEDIT   pshs    D,X,U,CC        ; save the used registers onto the stack                
F5A7  FC005A                          ldd     _CURSOR_COL     ; load the current cursor position
F5AA  FD005D                          std     _ANCHOR_COL     ;   use it to update the anchor position
F5AD  8601                            lda     #1              ; load the enable condition
F5AF  B7FE42                          sta     EDT_ENABLE      ; to enable the line editor
F5B2                  KRNL_LEDIT_0    ; display the line up to the cursor             
F5B2  FC005D                          ldd     _ANCHOR_COL     ; restore the line editor anchor
F5B5  FD005A                          std     _CURSOR_COL     ; into the console cursor position
F5B8  CE0100                          ldu    #EDT_BUFFER      ; point to the start of the edit buffer
F5BB  F6FE41                          ldb    EDT_BFR_CSR      ; the buffer csr position
F5BE  F7005F                          stb    _LOCAL_0         ; store the edit csr position locally
F5C1  7D005F          KRNL_LEDIT_1    tst    _LOCAL_0         ; test the edit csr position
F5C4  270C                            beq     KRNL_LEDIT_2    ; if we're there, go display the cursor
F5C6  7A005F                          dec     _LOCAL_0        ; decrement the edit csr position
F5C9  A6C0                            lda     ,u+             ; load the next character from the buffer
F5CB  2705                            beq     KRNL_LEDIT_2    ; display csr if at the null terminator
F5CD  BDF4B8                          jsr     KRNL_CHROUT     ; output the character to the console
F5D0  20EF                            bra     KRNL_LEDIT_1    ; loop until we're at the cursor
F5D2                  KRNL_LEDIT_2    ; display the cursor at the end of the line
F5D2  8620                            lda     #' '            ; load a blank SPACE character
F5D4  F6FE03                          ldb     SYS_CLOCK_DIV   ; load clock timer data
F5D7  58                              lslb                    ; times two
F5D8  C4F0                            andb    #$F0            ; B now holds color cycled attribute
F5DA  6DC4                            tst     ,u              ; test the next character in the buffer
F5DC  2702                            beq     KRNL_LEDIT_3    ; use the SPACE if we're at a null
F5DE  A6C0                            lda     ,u+             ; load the next character from buffer
F5E0                  KRNL_LEDIT_3    ; finish the line
F5E0  BDF54B                          jsr     KRNL_CSRPOS     ; load X with the current cursor position 
F5E3  1E89                            exg     a,b
F5E5  ED84                            std     ,x              ; store the character where X points to
F5E7  7C005A                          inc     _CURSOR_COL     ; ipdate the cursor column number
                                      ; ldb   KRNL_ATTRIB     ; load the default color attribute
F5EA  A6C0            KRNL_LEDIT_4    lda     ,u+             ; fetch the next character from the buffer
F5EC  2705                            beq     KRNL_DONE       ; if it's null, we're done
F5EE  BDF4B8                          jsr     KRNL_CHROUT     ; output it to the console
F5F1  20F7                            bra     KRNL_LEDIT_4    ; continue looping until we find the null
F5F3                  KRNL_DONE       ; space at the end      
F5F3  8620                            lda     #' '            ; load the SPACE character
F5F5  BDF54B                          jsr     KRNL_CSRPOS     ; fetch the cursor position into X
F5F8  8620                            lda     #' '            ; load the SPACE character
F5FA  F6005C                          ldb     _ATTRIB         ; load the current color attribute
F5FD  1E89                            exg     a,b
F5FF  ED84                            std     ,x              ; update the console
                                      ; test for the user pressing ENTER / RETURN
F601  B6FE30                          lda     CHAR_POP        ; Pop the top key from the queue
F604  27AC                            beq     KRNL_LEDIT_0    ; loop to the top if no keys we're pressed
F606  810D                            cmpa    #$0d            ; check for the RETURN / ENTER key press
F608  26A8                            bne     KRNL_LEDIT_0    ; if not pressend, loop back to the top         
F60A  7FFE42                          clr     EDT_ENABLE      ; disable the line editor               
F60D  BDF54B                          jsr     KRNL_CSRPOS     ; load the cursor position into X
F610  B6005C                          lda     _ATTRIB
F613  C620                            ldb     #' '            ; load a SPACE character
F615  ED1E                            std     -2,x            ; store the character, clean up artifacts
F617  FC005D                          ldd     _ANCHOR_COL     ; restore the line editor anchor
F61A  FD005A                          std     _CURSOR_COL     ; into the console cursor position
F61D  8E0100                          ldx     #EDT_BUFFER     ; point to the edit buffer
F620  BDF52D                          jsr     KRNL_LINEOUT    ; send the edit buffer to the console
F623  35D7                            puls    D,X,U,CC,PC     ; cleanup saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_GETKEY                                                               *
                      ; *     Input a character from the console. Waits for the keypress.           *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: NONE                                                  *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    A = key code of the key that was pressed              *
                      ; *                         All other registers preserved                     *
                      ; *****************************************************************************
F625  BDF629          SYS_GETKEY      jsr     KRNL_GETKEY     ; call the kernel get key handler
F628  3B                              rti                     ; return from interrupt
                                      ; ...
F629  6E9F001E        KRNL_GETKEY     jmp     [VEC_GETKEY]    ; proceed through the software vector    
F62D  3405            STUB_GETKEY     pshs    b,CC            ; save the used registers onto the stack
F62F  F6FE30          K_GETKEY_0      ldb     CHAR_POP        ; pop the next key from the queue
F632  26FB                            bne     K_GETKEY_0      ; continue until the queue is empty             
F634  F6FE2E          K_GETKEY_1      ldb     CHAR_Q_LEN      ; how many keys are in the queue
F637  27FB                            beq     K_GETKEY_1      ; loop until a key is queued
F639  B6FE30                          lda     CHAR_POP        ; pop the key into A to be returned
F63C  3585                            puls    b,CC,PC         ; cleanup saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_GETHEX                                                               *
                      ; *     Input a hex digit from the console. Waits for the keypress.           *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: NONE                                                  *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    A = key code of the key that was pressed              *
                      ; *                         All other registers preserved                     *
                      ; *****************************************************************************
F63E  BDF642          SYS_GETHEX      jsr     KRNL_GETHEX     ; call the kernel GetHex handler
F641  3B                              rti
                                      ; ...
F642  6E9F0020        KRNL_GETHEX     jmp     [VEC_GETHEX]    ; proceed through the software vector
F646  3401            STUB_GETHEX     pshs    CC              ; save the used registers onto the stack
F648  8DDF            K_GETHEX_0      bsr     KRNL_GETKEY     ; wait for and fetch a key press
F64A  8130                            cmpa    #'0'            ; compare with the '0' key
F64C  2DFA                            blt     K_GETHEX_0      ; keep scanning if less
F64E  8139                            cmpa    #'9'            ; compare with the '9' key
F650  2312                            bls     K_GETHEX_DONE   ; found an appropriate key, return
F652  8141                            cmpa    #'A'            ; compare with the 'A' key
F654  2DF2                            blt     K_GETHEX_0      ; keep scanning if less
F656  8146                            cmpa    #'F'            ; compare with the 'F' key
F658  230A                            bls     K_GETHEX_DONE   ; found an appropriate key, return
F65A  8161                            cmpa    #'a'            ; compare with the 'a' key
F65C  2DEA                            blt     K_GETHEX_0      ; keep scanning if less
F65E  8166                            cmpa    #'f'            ; compare with the 'f' key
F660  2302                            bls     K_GETHEX_DONE   ; found an appropriate key, return
F662  20E4                            bra     K_GETHEX_0      ; keep scanning
F664  3581            K_GETHEX_DONE   puls    CC,PC           ; cleanup saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_GETNUM                                                               *
                      ; *     Input a numeric digit from the console. Waits for the keypress.       *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: NONE                                                  *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    A = key code of the key that was pressed              *
                      ; *                         All other registers preserved                     *
                      ; *****************************************************************************
F666  BDF66A          SYS_GETNUM      jsr     KRNL_GETNUM     ; call the kernel GetNum handler
F669  3B                              rti     ; return from interrupt
                                      ; ...
F66A  6E9F0022        KRNL_GETNUM     jmp     [VEC_GETNUM]    ; proceed through the software vector
F66E  3401            STUB_GETNUM     pshs    CC              ; save the used registers onto the stack
F670  8DB7            K_GETNUM_0      bsr     KRNL_GETKEY     ; wait for and fetch a key press
F672  8130                            cmpa    #'0'            ; compare with the '0' key
F674  2DFA                            blt     K_GETNUM_0      ; keep scanning if less
F676  8139                            cmpa    #'9'            ; compare with the '9' key
F678  2302                            bls     K_GETNUM_DONE   ; found an appropriate key, return
F67A  20F4                            bra     K_GETNUM_0      ; keep scanning
F67C  3581            K_GETNUM_DONE   puls    CC,PC           ; cleanup saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_CMPSTR                                                               *
                      ; *     Compare two null-terminated strings of arbitrary lengths.             *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: X = starting address of string 1                      *
                      ; *                     Y = starting address of string 2                      *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    CC = set per the comparison (less, greater, or same)  *
                      ; *                     X = address last checked in string 1                  *
                      ; *                     Y = address last checked in string 2                  *
                      ; *****************************************************************************
F67E  BDF682          SYS_CMPSTR      jsr     KRNL_CMPSTR     ; call the kernel CMPSTR handler
F681  3B                              rti                     ; return from the interrupt
                                      ; ...
F682  6E9F0024        KRNL_CMPSTR     jmp     [VEC_CMPSTR]    ; proceed through the software vector
F686  3406            STUB_CMPSTR     pshs    D               ; save the used registers onto the stack                
F688  6D84            K_CMP_LOOP      tst     ,x              ; test the current character in string 1
F68A  2606                            bne     K_CMP_1         ; if its non-null, go test in string 2
F68C  6DA4                            tst     ,y              ; test if character in both are null
F68E  271E                            beq     K_CMP_EQUAL     ; if so, strings are equal
F690  2010                            bra     K_CMP_LESS      ; is LESS if str1 is null but str2 is not
F692  6DA4            K_CMP_1         tst     ,y              ; char in str1 is not null, but str2 is
F694  2712                            beq     K_CMP_GREATER   ; return GREATER
F696  A680                            lda     ,x+             ; compare character from string 1
                                      ;
F698  8A20                            ora     #$20            ; convert all letters to lower case
                                      ;
F69A  A1A0                            cmpa    ,y+             ;    with character from string 2
F69C  2D04                            blt     K_CMP_LESS      ; return LESS
F69E  2E08                            bgt     K_CMP_GREATER   ; return GREATER
F6A0  20E6                            bra     K_CMP_LOOP      ; otherwise continue looping
F6A2  8601            K_CMP_LESS      lda     #1              ; compare 1
F6A4  8102                            cmpa    #2              ;    with 2
F6A6  2009                            bra     K_CMP_DONE      ; return LESS
F6A8  8602            K_CMP_GREATER   lda     #2              ; compare 2
F6AA  8101                            cmpa    #1              ;    with 1
F6AC  2003                            bra     K_CMP_DONE      ; return GREATER
F6AE  4F              K_CMP_EQUAL     clra                    ; set to zero
F6AF  8100                            cmpa    #0              ; return EQUAL
F6B1  3586            K_CMP_DONE      puls    D,PC            ; cleanup saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_CMD_PROC                                                             *
                      ; *     Parse the command from the line edit buffer.                          *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: Command text within EDT_BUFFER                        *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    A = search string table index (or $FF if not found)   *
F6B3                  ' *                     X & Y Modified                                        *
                      ; *                     FIO_BUFFER will be modified                           *
                      ; *****************************************************************************
F6B3  BDF6B7          SYS_CMD_PROC    jsr     KRNL_CMD_PROC   ; call the kernel command proc handler
F6B6  3B                              rti                     ; return from the interrupt
                                      ; ...
F6B7  6E9F0026        KRNL_CMD_PROC   jmp     [VEC_CMD_PROC]  ; proceed through the software vector
F6BB  3405            STUB_CMD_PROC   pshs    B,CC            ; save the used registers onto the stack
                                      ; copy EDT_BUFFER to FIO_BUFFER
F6BD  8E0100                          ldx     #EDT_BUFFER     ; the start of the input buffer
F6C0  108E0180                        ldy     #FIO_BUFFER     ; use the I/O buffer temporarily
F6C4  A680            K_CMDP_0        lda     ,x+             ; load a character from the input
F6C6  8141                            cmpa    #'A'            ; make sure input is in lower case
F6C8  2D04                            blt     K_CMDP_3        ;   valid character if < 'A'
F6CA  815A                            cmpa    #'Z'            ; all other characters are good to go
F6CC  2E00                            bgt     K_CMDP_3        ;   valid charcters above 'Z'
                                      * ora   #$20            ; convert all letters to lower case (DONT DO THIS HERE!!!!)
F6CE  A7A0            K_CMDP_3        sta     ,y+             ; copy it to the output
F6D0  26F2                            bne     K_CMDP_0        ; branch until done copying
                                      ; replace the null-terminator with $FF
F6D2  86FF                            lda     #$ff            ; the new character $FF
F6D4  A7A4                            sta     ,y              ; replace the null-terminator
                                      ; replace SPACES with NULL (unless within '' or "")
F6D6  8E0180                          ldx     #FIO_BUFFER     ; the start of the temp buffer
F6D9  A680            K_CMDP_1        lda     ,x+             ; load the next character from buffer
F6DB  2723                            beq     K_CMDP_2
F6DD  81FF                            cmpa    #$FF            ; are we at the end of the buffer?
F6DF  271F                            beq     K_CMDP_2        ;   yes, go parse the buffer
F6E1  8127                            cmpa    #"'"            ; are we at a single-quote character?
F6E3  270C                            beq     K_CPROC_SKIP    ;   skip through until we find another
F6E5  8122                            cmpa    #'"'            ; are we at a double-quote character?
F6E7  2708                            beq     K_CPROC_SKIP    ;   skip through until we find another
F6E9  8120                            cmpa    #' '            ; are we at a SPACE character?
F6EB  26EC                            bne     K_CMDP_1        ; nope, continue scanning       
F6ED  6F1F                            clr     -1,x            ; convert the SPACE to a NULL
F6EF  20E8                            bra     K_CMDP_1        ; continue scanning through the buffer
F6F1  A180            K_CPROC_SKIP    cmpa    ,x+             ; is character a quote character?
F6F3  27E4                            beq     K_CMDP_1        ;    yes, go back to scanning the buffer
F6F5  6D84                            tst     ,x              ; are we at a NULL?
F6F7  26F8                            bne     K_CPROC_SKIP    ;    nope, keep scanning for a quote            
F6F9  BDF4F1                          jsr     KRNL_NEWLINE    ; on error: send a linefeed cleanup
F6FC  86FF                            lda     #$FF            ; error: end of line found but no quote
F6FE  200E                            bra     K_CPROC_DONE    ; continue looking for a quote character
                                      ; FIO_BUFFER should now be prepared for parsing
F700  860A            K_CMDP_2        lda     #$0a            ; line feed character
F702  BDF4B8                          jsr     KRNL_CHROUT     ; send the line feed
F705  108EF087                        ldy     #KRNL_CMD_TABLE ; point to the command table to search
F709  8E0180                          ldx     #FIO_BUFFER     ; point to the command to search for
                                      ; X now points to the command to search for in the table
F70C  8D05                            bsr     KRNL_TBLSEARCH  ; seach the table for the command
                                      ; A = index of the found search string table index
F70E  3585            K_CPROC_DONE    puls    B,CC,PC         ; cleanup saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_TBLSEARCH                                                            *
                      ; *     Table Search (find the string and return its index)                   *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: X points to a string to be searched for               *
                      ; *                     Y points to the start of a string table               *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    A = string index if found, -1 ($FF) if not found      *
                      ; *                     X = the end of the search string(next argument)       *
                      ; *                         All other registers preserved                     *
                      ; *****************************************************************************
F710  BDF713          SYS_TBLSEARCH   jsr     KRNL_TBLSEARCH  ; call the kernel table search handler
F713  6E9F0028        KRNL_TBLSEARCH  jmp     [VEC_TBLSEARCH] ; proceed through the software vector
F717  3465            STUB_TBLSEARCH  pshs    B,Y,U,CC        ; save the used registers onto the stack
F719  1F13                            tfr     X,U             ; save X in U
F71B  4F                              clra                    ; set the return index to 0
F71C  1F31            K_TBLS_0        tfr     U,X             ; restore X
F71E  BDF682                          jsr     KRNL_CMPSTR     ; compare strings at X and at Y
F721  270E                            beq     K_TBLS_DONE     ; found the string in the table         
F723  4C                              inca                    ; increment the index return value
F724  E6A0            K_TBLS_1        ldb     ,y+             ; look at the next character in table
F726  C1FF                            cmpb    #$ff            ; is it the $ff terminator?
F728  2705                            beq     K_TBLS_NOTFOUND ; yes, the entry is not in the table
F72A  5D                              tstb                    ; are we looking at a null character?
F72B  26F7                            bne     K_TBLS_1        ; loop until the end of this entry
F72D  20ED                            bra     K_TBLS_0        ; look at the next entry
F72F  86FF            K_TBLS_NOTFOUND lda     #$ff            ; not found error code
F731  35E5            K_TBLS_DONE     puls    B,Y,U,CC,PC     ; cleanup saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_CPY_DWORD                                                            *
                      ; *     Copy 32-bits from where X points to where Y points                    *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: X points to a DWORD to be copied from                 *
                      ; *                     Y points to a DWORD to be copied to                   *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:        All registers preserved                           *
                      ; *****************************************************************************
F733  BDF737          SYS_CPY_DWORD   jsr     KRNL_CPY_DWORD  ; call the kernel copy dword handler
F736  3B                              rti                     ; return from the interrupt
                                      ; ...
F737  6E9F002A        KRNL_CPY_DWORD  jmp     [VEC_CPY_DWORD] ; proceed through the software vector
F73B  3407            STUB_CPY_DWORD  pshs    D,CC            ; save the used registers onto the stack
F73D  EC84                            ldd     ,x              ; load the most-significant 16-bit word
F73F  EDA4                            std     ,y              ; save the most-significant 16-bit word
F741  EC02                            ldd     2,x             ; load the least-significant 16-bit word
F743  ED22                            std     2,y             ; save the least-significant 16-bit word
F745  3587                            puls    D,CC,PC         ; cleanup saved registers and return
                      
                      ; *******************************************************************************
                      ; * KRNL_D_TO_RAW(A, B, or R)                                                   *
                      ; *     Write the D register to one of the raw float registers                  *
                      ; *                                                                             *
                      ; * ENTRY REQUIREMENTS: D = 16-bit value to be written                          *
                      ; *                                                                             *
                      ; * EXIT CONDITIONS:        All registers preserved                             *
                      ; *******************************************************************************
F747  BDF74B          SYS_D_TO_RAWA   jsr     KRNL_D_TO_RAWA  ; call the kernel D_TO_RAWA handler
F74A  3B                              rti                     ; return from the interrupt
                                      ; ...
F74B  6E9F002C        KRNL_D_TO_RAWA  jmp     [VEC_D_TO_RAWA] ; proceed through the software vector
F74F  3401            STUB_D_TO_RAWA  pshs    CC              ; save the used registers onto the stack
F751  7FFE69                          clr     MATH_ACA_RAW+0  ; clear unneeded byte
F754  7FFE6A                          clr     MATH_ACA_RAW+1  ; clear unneeded byte
F757  FDFE6B                          std     MATH_ACA_RAW+2  ; store D in the ACA raw float register
F75A  3581                            puls    CC,PC           ; cleanup saved registers and return
                                      
F75C  BDF760          SYS_D_TO_RAWB   jsr     KRNL_D_TO_RAWB  ; call the kernel D_TO_RAWB handler
F75F  3B                              rti                     ; return from the interrupt
                                      ; ...
F760  6E9F002E        KRNL_D_TO_RAWB  jmp     [VEC_D_TO_RAWB] ; proceed through the software vector
F764  3401            STUB_D_TO_RAWB  pshs    CC              ; save the used registers onto the stack
F766  7FFE73                          clr     MATH_ACB_RAW+0  ; clear unneeded byte
F769  7FFE74                          clr     MATH_ACB_RAW+1  ; clear unneeded byte
F76C  FDFE75                          std     MATH_ACB_RAW+2  ; store D in the ACB raw float register
F76F  3581                            puls    CC,PC           ; cleanup saved registers and return
                      
F771  BDF775          SYS_D_TO_RAWR   jsr     KRNL_D_TO_RAWR  ; call the kernel D_TO_RAWR handler
F774  3B                              rti                     ; return from the interrupt
                                      ; ...
F775  6E9F0030        KRNL_D_TO_RAWR  jmp     [VEC_D_TO_RAWR] ; proceed through the software vector
F779  3401            STUB_D_TO_RAWR  pshs    CC              ; save the used registers onto the stack
F77B  7FFE7D                          clr     MATH_ACR_RAW+0  ; clear unneeded byte
F77E  7FFE7E                          clr     MATH_ACR_RAW+1  ; clear unneeded byte
F781  FDFE7F                          std     MATH_ACR_RAW+2  ; store D in the ACR raw float register
F784  3581                            puls    CC,PC           ; cleanup saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_D_TO_INT(A, B, or R)                                                 *
                      ; *     Write the D register to one of the FP integer registers               *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: D = 16-bit value to be written                        *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:        All registers preserved                           *
                      ; *****************************************************************************
F786  BDF78A          SYS_D_TO_INTA   jsr     KRNL_D_TO_INTA  ; call the kernel D_TO_INTA handler
F789  3B                              rti                     ; return from the interrupt
                                      ; ...
F78A  6E9F0032        KRNL_D_TO_INTA  jmp     [VEC_D_TO_INTA] ; proceed through the software vector
F78E  3401            STUB_D_TO_INTA  pshs    CC              ; save the used registers onto the stack
F790  7FFE6D                          clr     MATH_ACA_INT+0  ; clear unneeded byte
F793  7FFE6E                          clr     MATH_ACA_INT+1  ; clear unneeded byte
F796  FDFE6F                          std     MATH_ACA_INT+2  ; store D in the ACA integer register
F799  3581                            puls    CC,PC           ; cleanup saved registers and return
                      
F79B  BDF79F          SYS_D_TO_INTB   jsr     KRNL_D_TO_INTB  ; call the kernel D_TO_INTB handler
F79E  3B                              rti                     ; return from the interrupt
                                      ; ...           
F79F  6E9F0034        KRNL_D_TO_INTB  jmp     [VEC_D_TO_INTB] ; proceed through the software vector
F7A3  3401            STUB_D_TO_INTB  pshs    CC              ; save the used registers onto the stack
F7A5  7FFE77                          clr     MATH_ACB_INT+0  ; clear unneeded byte
F7A8  7FFE78                          clr     MATH_ACB_INT+1  ; clear unneeded byte
F7AB  FDFE79                          std     MATH_ACB_INT+2  ; store D in the ACB integer register
F7AE  3581                            puls    CC,PC           ; cleanup saved registers and return
                      
F7B0  BDF7B4          SYS_D_TO_INTR   jsr     KRNL_D_TO_INTR  ; call the kernel D_TO_INTR handler
F7B3  3B                              rti                     ; return from the interrupt
                                      ; ...
F7B4  6E9F0036        KRNL_D_TO_INTR  jmp     [VEC_D_TO_INTR] ; proceed through the software vector
F7B8  3401            STUB_D_TO_INTR  pshs    CC              ; save the used registers onto the stack
F7BA  7FFE81                          clr     MATH_ACR_INT+0  ; clear unneeded byte
F7BD  7FFE82                          clr     MATH_ACR_INT+1  ; clear unneeded byte
F7C0  FDFE83                          std     MATH_ACR_INT+2  ; store D in the ACR integer register
F7C3  3581                            puls    CC,PC           ; cleanup saved registers and return
                      
                      ; *******************************************************************************
                      ; * KRNL_RAW(A, B, or R)_TO_D                                                   *
                      ; *     Read one of the raw float registers into the D register                 *
                      ; *                                                                             *
                      ; * ENTRY REQUIREMENTS: none                                                    *
                      ; *                                                                             *
                      ; * EXIT CONDITIONS: D = the integer value of the chosen FP register            *
                      ; *                         All other registers preserved                       *
                      ; *                                                                             *
                      ; *******************************************************************************
F7C5  BDF7C9          SYS_RAWA_TO_D   jsr     KRNL_RAWA_TO_D  ; call the kernel RAWA_TO_D handler
F7C8  3B                              rti                     ; return from the interrupt
                                      ; ...
F7C9  6E9F0038        KRNL_RAWA_TO_D  jmp     [VEC_RAWA_TO_D] ; proceed through the software vector
F7CD  3401            STUB_RAWA_TO_D  pshs    CC              ; save the used registers onto the stack
F7CF  FCFE6B                          ldd     MATH_ACA_RAW+2  ; load the ACA raw float value
F7D2  3581                            puls    CC,PC           ; cleanup saved registers and return
                      
F7D4  BDF7D8          SYS_RAWB_TO_D   jsr     KRNL_RAWB_TO_D  ; call the kernel RAWB_TO_D handler
F7D7  3B                              rti                     ; return from the interrupt
                                      ; ...
F7D8  6E9F003A        KRNL_RAWB_TO_D  jmp     [VEC_RAWB_TO_D] ; proceed through the software vector
F7DC  3401            STUB_RAWB_TO_D  pshs    CC              ; save the used registers onto the stack
F7DE  FCFE75                          ldd     MATH_ACB_RAW+2  ; load the ACB raw float value
F7E1  3581                            puls    CC,PC           ; cleanup saved registers and return
                      
F7E3  BDF7E7          SYS_RAWR_TO_D   jsr     KRNL_RAWR_TO_D  ; call the kernel RAWR_TO_D handler
F7E6  3B                              rti                     ; return from the interrupt
                                      ; ...
F7E7  6E9F003C        KRNL_RAWR_TO_D  jmp     [VEC_RAWR_TO_D] ; proceed through the software vector
F7EB  3401            STUB_RAWR_TO_D  pshs    CC              ; save the used registers onto the stack
F7ED  FCFE7F                          ldd     MATH_ACR_RAW+2  ; load the ACR raw float value
F7F0  3581                            puls    CC,PC           ; cleanup saved registers and return
                                      
                      
                      ; *******************************************************************************
                      ; * KRNL_INT(A, B, or R)_TO_D                                                   *
                      ; *     Read one of the integer registers into the D register                   *
                      ; *                                                                             *
                      ; * ENTRY REQUIREMENTS: none                                                    *
                      ; *                                                                             *
                      ; * EXIT CONDITIONS: D = the integer value of the chosen FP register            *
                      ; *                         All other registers preserved                       *
                      ; *                                                                             *
                      ; *******************************************************************************
F7F2  BDF7F6          SYS_INTA_TO_D   jsr             KRNL_INTA_TO_D  ; call the kernel INTA_TO_D handler
F7F5  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F7F6  6E9F003E        KRNL_INTA_TO_D  jmp             [VEC_INTA_TO_D] ; proceed through the software vector
F7FA  3401            STUB_INTA_TO_D  pshs    CC                              ; save the used registers onto the stack
F7FC  FCFE6F                                          ldd             MATH_ACA_INT+2  ; load the ACA integer value
F7FF  3581                                            puls    CC,PC                   ; cleanup saved registers and return
                      
F801  BDF805          SYS_INTB_TO_D   jsr             KRNL_INTB_TO_D  ; call the kernel INTB_TO_D handler
F804  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F805  6E9F0040        KRNL_INTB_TO_D  jmp             [VEC_INTB_TO_D] ; proceed through the software vector
F809  3401            STUB_INTB_TO_D  pshs    CC                              ; save the used registers onto the stack
F80B  FCFE79                                          ldd             MATH_ACB_INT+2  ; load the ACB integer value
F80E  3581                                            puls    CC,PC                   ; cleanup saved registers and return
                      
F810  BDF814          SYS_INTR_TO_D   jsr             KRNL_INTR_TO_D  ; call the kernel INTR_TO_D handler
F813  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F814  6E9F0042        KRNL_INTR_TO_D  jmp             [VEC_INTR_TO_D] ; proceed through the software vector
F818  3401            STUB_INTR_TO_D  pshs    CC                              ; save the used registers onto the stack
F81A  FCFE83                                          ldd             MATH_ACR_INT+2  ; load the ACR integer value
F81D  3581                                            puls    CC,PC                   ; cleanup saved registers and return
                      
                      ; *****************************************************************************
                      ; * KRNL_8BIT_MATH                                                            *
                      ; *     8-bit integer math                                                    *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: A = ACA Integer                                       *
                      ; *                     B = ACB Integer                                       *
                      ; *                     U = Math Operation (MOP)                              *
                      ; *                         (only least significant byte is relevant)         *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    D = Result                                            *
                      ; *                     All other registers preserved                         *
                      ; *****************************************************************************
F81F  BDF823          SYS_8BIT_MATH   jsr             KRNL_8BIT_MATH  ; call the kernel 8BIT_MATH handler
F822  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F823  6E9F0044        KRNL_8BIT_MATH  jmp             [VEC_8BIT_MATH] ; proceed through the software vector
F827  3441            STUB_8BIT_MATH  pshs    U,CC                    ; save the used registers onto the stack
                                                      ; A to ACA
F829  7FFE6D                                          clr             MATH_ACA_INT+0  ; clear unneeded byte
F82C  7FFE6E                                          clr             MATH_ACA_INT+1  ; clear unneeded byte
F82F  7FFE6F                                          clr             MATH_ACA_INT+2  ; clear unneeded byte
F832  B7FE70                                          sta             MATH_ACA_INT+3  ; store A in the ACA integer register
                                                      ; B to ACB
F835  7FFE77                                          clr             MATH_ACB_INT+0  ; clear unneeded byte
F838  7FFE78                                          clr             MATH_ACB_INT+1  ; clear unneeded byte
F83B  7FFE79                                          clr             MATH_ACB_INT+2  ; clear unneeded byte
F83E  F7FE7A                                          stb             MATH_ACB_INT+3  ; store B in the ACB integer register
                                                      ; U to MATH_OPERATION
F841  1F30                                            tfr             U,D                             ; transfer the MOP instruction to D
F843  F7FE85                                          stb             MATH_OPERATION  ; send the MOP command (in B)
                                                      ; ACR to D
F846  FCFE83                                          ldd             MATH_ACR_INT+2  ; load the result into the D register
F849  35C1                                            puls    U,CC,PC                 ; cleanup saved registers and return
                      
                      ; *****************************************************************************
                      ; * KRNL_DSP_AC(A, B, or R)                                                   *
                      ; *     Displays the floating point number in one of the FP registers.        *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: none                                                  *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    All registers preserved                               *
                      ; *****************************************************************************
F84B  BDF84F          SYS_DSP_ACA             jsr             KRNL_DSP_ACA    ; call the kernel DSP_ACA handler
F84E  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F84F  6E9F0046        KRNL_DSP_ACA    jmp             [VEC_DSP_ACA]   ; proceed through the software vector
F853  3411            STUB_DSP_ACA    pshs    X,CC                    ; save the used registers onto the stack
F855  8EFE67                                          ldx             #MATH_ACA_POS   ; index the ACA data
F858  8D24                                            bsr             KRNL_DSP_HELPER ; display the floating point of ACA
F85A  3591                                            puls    X,CC,PC                 ; cleanup saved registers and return
                      
F85C  BDF860          SYS_DSP_ACB             jsr             KRNL_DSP_ACB    ; call the kernel DSP_ACB handler
F85F  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F860  6E9F0048        KRNL_DSP_ACB    jmp             [VEC_DSP_ACB]   ; proceed through the software vector
F864  3411            STUB_DSP_ACB    pshs    X,CC                    ; save the used registers onto the stack
F866  8EFE71                                          ldx             #MATH_ACB_POS   ; index the ACB data
F869  8D13                                            bsr             KRNL_DSP_HELPER ; display the floating point of ACB
F86B  3591                                            puls    X,CC,PC                 ; cleanup saved registers and return
                      
F86D  BDF871          SYS_DSP_ACR             jsr             KRNL_DSP_ACR    ; call the kernel DSP_ACR handler
F870  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F871  6E9F004A        KRNL_DSP_ACR    jmp             [VEC_DSP_ACR]   ; proceed through the software vector
F875  3411            STUB_DSP_ACR    pshs    X,CC                    ; save the used registers onto the stack
F877  8EFE7B                                          ldx             #MATH_ACR_POS   ; index the ACR data
F87A  8D02                                            bsr             KRNL_DSP_HELPER ; display the floating point of ACR
F87C  3591                                            puls    X,CC,PC                 ; cleanup saved registers and return
                      
                      ;HELPER:  X=address of a FP_POS register pointed to by X
F87E  3403            KRNL_DSP_HELPER pshs    A,CC                    ; save the used registers onto the stack
F880  6F84                                            clr             ,x                              ; reset this math data port
F882  A601            K_DSP_FP_0              lda             1,x                             ; pop a character from the port
F884  BDF4B8                                          jsr             KRNL_CHROUT             ; send it to the console
F887  26F9                                            bne             K_DSP_FP_0              ; continue if not at the null-terminator
F889  3583                                            puls    A,CC,PC                 ; cleanup saved registers and return
                      
                      ; *****************************************************************************
                      ; * KRNL_DSP_INT(A, B, or R)                                                  *
                      ; *     Displays the integer number in one of the FP registers.               *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: none                                                  *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    All registers preserved                               *
                      ; ***************************************************************************** 
F88B  BDF88F          SYS_DSP_INTA    jsr             KRNL_DSP_INTA   ; call the kernel DSP_INTA handler
F88E  3B                                              rti                                             ; return from the interrupt
                                                      ; ...   
F88F  6E9F004C        KRNL_DSP_INTA   jmp             [VEC_DSP_INTA]  ; proceed through the software vector
F893  3411            STUB_DSP_INTA   pshs    X,CC                    ; save the used register onto the stack
F895  8EFE67                                          ldx             #MATH_ACA_POS   ; index the ACA data
F898  8D24                                            bsr             KRNL_DSP_IHELP  ; display the integer portion of ACA
F89A  3591                                            puls    X,CC,PC                 ; cleanup and return
                      
F89C  BDF8A0          SYS_DSP_INTB    jsr             KRNL_DSP_INTB   ; call the kernel DSP_INTB handler
F89F  3B                                              rti                                             ; return from the interrupt
                                                      ; ...   
F8A0  6E9F004E        KRNL_DSP_INTB   jmp             [VEC_DSP_INTB]  ; proceed through the software vector
F8A4  3411            STUB_DSP_INTB   pshs    X,CC                    ; save the used register onto the stack
F8A6  8EFE67                                          ldx             #MATH_ACA_POS   ; index the ACB data
F8A9  8D13                                            bsr             KRNL_DSP_IHELP  ; display the integer portion of ACB
F8AB  3591                                            puls    X,CC,PC                 ; cleanup and return
                      
F8AD  BDF8B1          SYS_DSP_INTR    jsr             KRNL_DSP_INTR   ; call the kernel DSP_INTR handler
F8B0  3B                                              rti                                             ; return from the interrupt
                                                      ; ...   
F8B1  6E9F0050        KRNL_DSP_INTR   jmp             [VEC_DSP_INTR]  ; proceed through the software vector
F8B5  3411            STUB_DSP_INTR   pshs    X,CC                    ; save the used register onto the stack
F8B7  8EFE7B                                          ldx             #MATH_ACR_POS   ; index the ACR data
F8BA  8D02                                            bsr             KRNL_DSP_IHELP  ; display the integer portion of ACR
F8BC  3591                                            puls    X,CC,PC                 ; cleanup and return
                      
                      ;HELPER:  X=address of a FP_POS register pointed to by X. Display Integer
F8BE  3403            KRNL_DSP_IHELP  pshs    A,CC                    ; save the used registers onto the stack
F8C0  6F84                                            clr             ,x                              ; reset this math data port
F8C2  A601            K_DSP_INT_0             lda             1,x                             ; pop a character from the port
F8C4  812E                                            cmpa    #'.'                    ; is it the decimal point?
F8C6  2706                                            beq             K_DSP_INT_RET   ;   yeah, we're done
F8C8  BDF4B8                                          jsr             KRNL_CHROUT             ; no, output to the console
F8CB  4D                                              tsta                                    ; are we at the null-terminator?
F8CC  26F4                                            bne             K_DSP_INT_0             ;   no, continue looping
F8CE  3583            K_DSP_INT_RET   puls    A,CC,PC                 ; cleanup saved registers and return
                      
                      
                      ; *****************************************************************************
                      ; * KRNL_WRITE_AC(A, B, or R)                                                 *
                      ; *     Sets one of the floating point registers to a FP value contained      *
                      ; *     within a null-terminated string pointed to by X.                      *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: X = points to a null-terminated string of numbers     *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    All registers preserved                               *
                      ; *****************************************************************************
F8D0  BDF8D4          SYS_WRITE_ACA   jsr             KRNL_WRITE_ACA  ; call the kernel WRITE_ACA handler
F8D3  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F8D4  6E9F0052        KRNL_WRITE_ACA  jmp             [VEC_WRITE_ACA] ; proceed through the software vector
F8D8  3431            STUB_WRITE_ACA  pshs    X,Y,CC                  ; save the used registers onto the stack
F8DA  108EFE67                                        ldy             #MATH_ACA_POS   ; point to the ACA chr pos register
F8DE  8D26                                            bsr             KRNL_WRITE_HLP  ; display the number to the console
F8E0  35B1                                            puls    X,Y,CC,PC               ; cleanup saved registers and return
                      
F8E2  BDF8E6          SYS_WRITE_ACB   jsr             KRNL_WRITE_ACB  ; call the kernel WRITE_ACB handler
F8E5  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F8E6  6E9F0054        KRNL_WRITE_ACB  jmp             [VEC_WRITE_ACB] ; proceed through the software vector
F8EA  3431            STUB_WRITE_ACB  pshs    X,Y,CC                  ; save the used registers onto the stack
F8EC  108EFE71                                        ldy             #MATH_ACB_POS   ; point to the ACB chr pos register
F8F0  8D14                                            bsr             KRNL_WRITE_HLP  ; display the number to the console
F8F2  35B1                                            puls    X,Y,CC,PC               ; cleanup saved registers and return
                      
F8F4  BDF8F8          SYS_WRITE_ACR   jsr             KRNL_WRITE_ACR  ; call the kernel WRITE_ACR handler
F8F7  3B                                              rti                                             ; return from the interrupt
                                                      ; ...
F8F8  6E9F0056        KRNL_WRITE_ACR  jmp             [VEC_WRITE_ACR] ; proceed through the software vector
F8FC  3431            STUB_WRITE_ACR  pshs    X,Y,CC                  ; save the used registers onto the stack
F8FE  108EFE7B                                        ldy             #MATH_ACR_POS   ; point to the ACR chr pos register
F902  8D02                                            bsr             KRNL_WRITE_HLP  ; display the number to the console
F904  35B1                                            puls    X,Y,CC,PC               ; cleanup saved registers and return    
                      
                      ; X string to write, Y = ACn_POS
F906  3431            KRNL_WRITE_HLP  pshs    X,Y,CC                  ; save the used registers onto the stack
F908  6FA0                                            clr             ,y+                             ; set the chr pos to the start
F90A  A680            KRNL_WRITE_0    lda             ,x+                             ; load the next char from the string
F90C  2704                                            beq             KRNL_WRITE_DONE ; were done if it's a null-terminator
F90E  A7A4                                            sta             ,y                              ; store the char into the FP port
F910  20F8                                            bra             KRNL_WRITE_0    ; continue looping
F912  35B1            KRNL_WRITE_DONE puls    X,Y,CC,PC               ; cleanup saved registers and return
                      
                      ; *****************************************************************************
                      ; * KRNL_ARG_TO_A                                                             *
                      ; *     convert a numeric string (pointed to by X) to 0-25 and return it in A *
                      ; *                                                                           *
                      ; * ENTRY REQUIREMENTS: X = points to the string to be converted              *
                      ; *                         Note: hex values must be preceeded                *
                      ; *                               with a '$' character                        *
                      ; *                                                                           *
                      ; * EXIT CONDITIONS:    A = binary value represented by the input string      *
                      ; *                     All other registers preserved                         *
                      ; *****************************************************************************
F914  BDF918          SYS_ARG_TO_A    jsr             KRNL_ARG_TO_A   ; call the kernel ARG_TO_A handler
F917  3B                                              rti                                             ; return from the interrupt
                      
F918  6E9F0058        KRNL_ARG_TO_A   jmp             [VEC_ARG_TO_A]  ; proceed through the software vector
F91C  3415            STUB_ARG_TO_A   pshs    B,X,CC                  ; save the used registers onto the stack
F91E  E684                                            ldb             ,x                              ; load character to be converted
F920  C124                                            cmpb    #'$'                    ; is it the leading '$'?
F922  2708                                            beq             KARG_0                  ;   yeah, go convert from hexidecimal
F924  BDF8D4                                          jsr             KRNL_WRITE_ACA  ; use the FP to convert from decimal
F927  B6FE70                                          lda             MATH_ACA_INT+3  ; load the converted binary into A
F92A  2012                                            bra             KARG_DONE               ;   A now holds the binary, return
F92C  3001            KARG_0                  leax    1,x                             ; skip passed the initial '$' character
F92E  E680                                            ldb             ,x+                             ; load character to convert into B
F930  8D0E                                            bsr             KARG_HEX                ; convert hex character to 0-15 binary
F932  58                                              lslb                                    ; shift the 4-bit data ... 
F933  58                                              lslb                                    ; ... into the most significant ...
F934  58                                              lslb                                    ; ... four-bits
F935  58                                              lslb                                    ; $n0 n = useful value
F936  3404                                            pshs    b                               ; save our work so far
F938  E680                                            ldb             ,x+                             ; load the next hex character
F93A  8D04                                            bsr             KARG_HEX                ; decode it to 0-15
F93C  AAE0                                            ora             ,s+                             ; merge the two and fix the stack
F93E  3595            KARG_DONE               puls    B,X,CC,PC               ; clean up and return
                                              ; helper sub
F940  3404            KARG_HEX                pshs    b                               ; save it 
F942  C030                                            subb    #'0'                    ; convert to binary
F944  2B0C                                            bmi             2f                              ; go if not numeric
F946  C109                                            cmpb    #$09                    ; is greater than 9?
F948  2304                                            bls             1f                              ; branch if not
F94A  CA20                                            orb             #$20                    ; to lower case
F94C  C027                                            subb    #$27                    ; reduce from 'a'
F94E  C10F            1                               cmpb    #$0f                    ; greater than 15?
F950  2302                                            bls             3f                              ; go if not
F952  C6FF            2                               ldb             #$ff                    ; load an error state $FF = BAD
F954  E1E0            3                               cmpb    ,s+                             ; fix the stack
F956  1F98                                            tfr             b,a                             ; restore into A
F958  39                                              rts                                             ; return
                      
                      
                      
                      
                      
                      
                      ; *******************************************************************************
                      ; * SUBROUTINE_TEMPLATE                                                         *
                      ; *     xxxxxxxxxxxxxxxxxx                                                      *
                      ; *                                                                             *
                      ; * ENTRY REQUIREMENTS: A = xxxxxxxxxxx                                         *
                      ; *                     B = xxxxxxxxxxx                                         *
                      ; *                                                                             *
                      ; * EXIT CONDITIONS:    D = Result                                              *
                      ; * EXIT CONDITIONS:    All registers preserved                                 *
                      ; *                     All other registers preserved                           *
                      ; *******************************************************************************
                      
                      
                      
                      
                      
                      
                      * ; *****************************************************************************
                      * ; * ROM BASED HARDWARE VECTORS                                                *
                      * ; *****************************************************************************
FFF0                                      org ROM_VECTS_DEVICE
FFF0                  KRNL_HARD_VECT                  
FFF0  F1CA                                fdb EXEC_start      ; (HARD_RSRVD) EXEC Interrupt Vector
FFF2  F1CB                                fdb SWI3_start      ; (HARD_SWI3 ) SWI3 Hardware Interrupt Vector
FFF4  F45E                                fdb SYS_Handler     ; (HARD_SWI2 ) SWI2 Hardware Interrupt Vector
FFF6  F1D1                                fdb FIRQ_start      ; (HARD_FIRQ ) FIRQ Hardware Interrupt Vector
FFF8  F1D4                                fdb IRQ_start       ; (HARD_IRQ  ) IRQ Hardware Interrupt Vector
FFFA  F1D7                                fdb SWI_start       ; (HARD_SWI  ) SWI / SYS Hardware Interrupt Vector
FFFC  F1DA                                fdb NMI_start       ; (HARD_NMI  ) NMI Hardware Interrupt Vector
FFFE  F000                                fdb KRNL_START      ; (HARD_RESET) RESET Hardware Interrupt Vector
0000                  KRNL_HARD_VECT_END
